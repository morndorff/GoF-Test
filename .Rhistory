############################################################
#N(0,2) vs exp(1/2)
#Notes that these distributions have identical variances (different means)
ptm<-proc.time()
z<-250 #Number of Samples
lens<-c(10,20,50,100,200) #Number of Draws in each sample
num.dif.draws<-length(lens) #How many different draws?
num.test<-1 #Number of Different tests
results<-matrix(,nrow=num.dif.draws,ncol=num.test) #Will record rejection rate later
for(i in 1:num.dif.draws){
#Generating Data
x<-matrix(rnorm(z*lens[i],0,2),nrow=z,ncol=lens[i])#X ~ N(0,2)
y<-matrix(rexp(z*lens[i],1/2),nrow=z,ncol=lens[i])#Y ~ exp(1/2)
#Outlier Removal OBC
pvals<-power.res(x,y,f=myts.out,g=perm.test.out)
results[i,1]<-sum(pvals<.05)/z #rejection Rate for OBC
}
liResults[[3]]<-cbind(liResults[[3]],results)
colnames(liResults[[3]])[5]<-c("OBC_out")
#########################################
#N(0,1) vs N(0,2)
#Notes that these distributions have different variances
ptm<-proc.time()
z<-250 #Number of Samples
lens<-c(10,20,50,100,200) #Number of Draws in each sample
num.dif.draws<-length(lens) #How many different draws?
num.test<-1 #Number of Different tests
results<-matrix(,nrow=num.dif.draws,ncol=num.test) #Will record rejection rate later
for(i in 1:num.dif.draws){
#Generating Data
x<-matrix(rnorm(z*lens[i],0,1),nrow=z,ncol=lens[i])#X ~ N(0,1)
y<-matrix(rnorm(z*lens[i],0,2),nrow=z,ncol=lens[i])#Y ~ N(0,3)
#Outlier Removal OBC
pvals<-power.res(x,y,f=myts.out,g=perm.test.out)
results[i,1]<-sum(pvals<.05)/z #rejection Rate for OBC
}
liResults[[4]]<-cbind(liResults[[4]],results)
colnames(liResults[[1]])[4]<-c("OBC_out")
#################
#N(3,3) vs Gamma(3,1)
#Notes that these distributions have different variances
ptm<-proc.time()
z<-250 #Number of Samples
lens<-c(10,20,50,100,200) #Number of Draws in each sample
num.dif.draws<-length(lens) #How many different draws?
num.test<-1 #Number of Different tests
results<-matrix(,nrow=num.dif.draws,ncol=num.test) #Will record rejection rate later
for(i in 1:num.dif.draws){
#Generating Data
x<-matrix(rnorm(z*lens[i],0,sqrt(3)),nrow=z,ncol=lens[i])#X ~ N(3,3)
y<-matrix(rgamma(z*lens[i],3,shape=1),nrow=z,ncol=lens[i])#Y ~ Gamma(alpha=3,beta=1) (shape=1,rate=1)
#Outlier Removal OBC
pvals<-power.res(x,y,f=myts.out,g=perm.test.out)
results[i,1]<-sum(pvals<.05)/z #rejection Rate for OBC
}
liResults[[5]]<-cbind(liResults[[5]],results)
colnames(liResults[[5]])[5]<-c("OBC_out")
################################
save.image("June18-UpdateMay20.RData")
savehistory("June18-UpdateMay20.Rhistory")
shinyapps::setAccountInfo(name='morndorff', token='0860123ED911EEDB90A75E15EC11D097', secret='f+Gif2ZTLvggluo07bL1h1AlH4IRM0MPEOaEbVLs')
library(shinyapps)
shinyapps::setAccountInfo(name='morndorff', token='0860123ED911EEDB90A75E15EC11D097', secret='f+Gif2ZTLvggluo07bL1h1AlH4IRM0MPEOaEbVLs')
load("/home/mark/Dropbox/Research/GoF Test/Power Simulations/6 Test Power sims June 18/June30-Power.RData")
source("/home/mark/Dropbox/Research/GoF Test/plot_functions.R")
diag.plot(x[1,], y[1,])
library(ggplot2)
?ggplot2
?ggplot
ggplot
diag.plot
?object.size
object.size(liData200)
object.size(liData200[1])
rm(list=ls())
library(CDFt)
x <- rnorm(100)
y <- rnorm(100)
CramerVonMisesTwoSamples(x, y)
sortx <- sort(x)
sorty <- sort(y)
M <- length(sortx)
N <- length(sorty)
a <- data.frame(val=sortx, range=seq(M), ens= rep(1,M))
b <- data.frame(val=sorty, range=seq(N), ens= rep(2,N))
head(a)
head(b)
d <- rbind(a,b)
head(d)
d <- d[order(d$val), ]
head(d)
d <- data.frame(d,rangTot = seq(M +N))
head(d)
dtfM = d[which(d$ens == 1), ]
head(dtfM)
dtfN = d[which(d$ens == 2), ]
somN = sum((dtfN$rang - dtfN$rangTot)^2)
somM = sum((dtfM$rang - dtfM$rangTot)^2)
U = N * somN + M * somM
CvM = ((U/(N * M))/(N + M)) - ((4 * M * N - 1)/(6 * (M +
N)))
CvM
CramerVonMisesTwoSamples
cvM
CvM
head(dtfM)
sortx <- sort(x)
sorty <- sort(y)
M <- length(sortx)
N <- length(sorty)
a <- data.frame(val=sortx, rang=seq(M), ens= rep(1, M))
b <- data.frame(val=sorty, rang=seq(N), ens= rep(2, N))
head(a)
head(b)
d <- rbind(a, b)
head(d)
d <- d[order(d$val), ]
head(d)
d <- data.frame(d,rangTot = seq(M +N))
head(d)
dtfM = d[which(d$ens == 1), ]
head(dtfM)
dtfN = d[which(d$ens == 2), ]
somN = sum((dtfN$rang - dtfN$rangTot)^2)
somM = sum((dtfM$rang - dtfM$rangTot)^2)
U = N * somN + M * somM
CvM = ((U/(N * M))/(N + M)) - ((4 * M * N - 1)/(6 * (M +
N)))
CvM
SomN
somN
library(CDFt)
CramerVonMisesTwoSamples
rm(list=ls())
set.seed(5)
source("functions.R")
# Initializing Power Simulation Parameters
z <- 500  #Number of samples
lens <- c(10, 20, 50, 100, 200)  #Number of draws in each sample
num.samps <- length(lens)  #How many different draws?
# Actual Distributions to test
dist <- list("norm", "norm", "norm", "norm", "norm", "unif", "unif", "unif")
param <- list(list(mean = 0, sd = 3),
list(mean = 0, sd = sqrt(3)),
list(mean = 0, sd = 2),
list(mean = 0, sd = 1),
list(mean = 0, sd = sqrt(3)),
list(min = 0.5, max = 1.5),
list(min = 0, max = 1),
list(min = 0, max = 1))
num.dist.test <- length(dist)  #Number of different distributions to test
# Null Distributions to test against:
null_dist <- list("t", "t", "exp", "norm", "gamma", "unif", "beta", "beta")
null_param <- list(list(df = 3),
list(df = 3),
list(rate = 0.5),
list(mean = 0, sd = 2),
list(shape = 1, rate = 3),
list(min = 0, max = 2),
list(shape1 = 0.5, shape2 = 0.5),
list(shape1 = 0.2, shape2 = 2))
# Methods to use
liMethods <- list(myts = myts,
ks.res.simp = ks.res.simp,
myts.max.simp=myts.max.simp,
myts.par=myts.par)
num.methods <- length(liMethods)
method_param <- list(NULL,
NULL,
NULL,
NULL)
# P-Value Cutoff to assess power
cutoff <- 0.05
# Generating Data
setwd("~/Dropbox/Research/GoF Test/Power Simulations/One Sample 4 Tests - July 20")
rm(list=ls())
set.seed(5)
source("functions.R")
# Initializing Power Simulation Parameters
z <- 500  #Number of samples
lens <- c(10, 20, 50, 100, 200)  #Number of draws in each sample
num.samps <- length(lens)  #How many different draws?
# Actual Distributions to test
dist <- list("norm", "norm", "norm", "norm", "norm", "unif", "unif", "unif")
param <- list(list(mean = 0, sd = 3),
list(mean = 0, sd = sqrt(3)),
list(mean = 0, sd = 2),
list(mean = 0, sd = 1),
list(mean = 0, sd = sqrt(3)),
list(min = 0.5, max = 1.5),
list(min = 0, max = 1),
list(min = 0, max = 1))
num.dist.test <- length(dist)  #Number of different distributions to test
# Null Distributions to test against:
null_dist <- list("t", "t", "exp", "norm", "gamma", "unif", "beta", "beta")
null_param <- list(list(df = 3),
list(df = 3),
list(rate = 0.5),
list(mean = 0, sd = 2),
list(shape = 1, rate = 3),
list(min = 0, max = 2),
list(shape1 = 0.5, shape2 = 0.5),
list(shape1 = 0.2, shape2 = 2))
# Methods to use
liMethods <- list(myts = myts,
ks.res.simp = ks.res.simp,
myts.max.simp=myts.max.simp,
myts.par=myts.par)
num.methods <- length(liMethods)
method_param <- list(NULL,
NULL,
NULL,
NULL)
# P-Value Cutoff to assess power
cutoff <- 0.05
null_param
str(null_param)
str(null_param[1])
str(null_param[[1]])
class(null_param)
class(null_param[[1]])
liData <- vector(mode = "list", length = num.dist.test)
# results <- matrix(, nrow = num.samps ncol = num.test) #Will record rejection rate
# later
for (i in 1:num.dist.test) {
samps <- vector(mode = "list", length = num.samps)
for (j in 1:num.samps) {
# Generating Data x<- matrix(distf[[i]](z * lens[j], param[[i]]), nrow = z, ncol =
# lens[j])
x <- matrix(make_sample(n = z * lens[j], dist = dist[[i]], param = param[[i]]),
nrow = z, ncol = lens[j])
samps[[j]] <- x
}
liData[[i]] <- samps
}
# Naming
for (i in 1:num.dist.test) {
names(liData)[i] <- paste(dist[[i]], "(", paste(param[[i]], collapse = ","), ")",
sep = "")
}
output: html_document
str(liData)
testx <- liData[[1]][[2]][1,]
testx
testx <- liData[[1]][[3]][1,]
testx
new.perm.test(testx, y=qt, distops=list(df=3), f=myts)
new.perm.test(testx, y=qt, distops=list(df=3), f=myts)
hist(testx)
null_dist[1]
dist[1]
param[[1]]
new.perm.test(testx, y=qt, distops=list(df=3), f=myts)
testx1 <- rnorm(50,0,3)
new.perm.test(testx1, y=qt, distops=list(df=3), f=myts)
new.perm.test(testx1, y=qt, distops=list(df=3), f=myts)
new.perm.test(testx1, y=qt, distops=list(df=3), f=myts)
testx1 <- rnorm(100,0,3)
new.perm.test(testx1, y=qt, distops=list(df=3), f=myts)
new.perm.test(testx1, y=qt, distops=list(df=3), f=myts)
testx1 <- rnorm(500,0,3)
new.perm.test(testx1, y=qt, distops=list(df=3), f=myts)
new.perm.test(testx1, y=qt, distops=list(df=3), f=myts)
rm(list=ls())
source("functions.R")
set.seed(5)
tx <- rt(100,3)
normx <- rnorm(100,0,sqrt(3))
new.perm.test(tx,qnorm,list(mean=0,sd=3) ,f=myts)
rm(list=ls())
source("functions.R")
set.seed(5)
tx <- rt(100,3)
normx <- rnorm(100,0,sqrt(3))
new.perm.test(tx,qnorm,list(mean=0,sd=3) ,f=myts)
new.perm.test(normx,qnorm,list(mean=0,sd=3), f=myts)
new.perm.test(normx,qnorm,list(mean=0,sd=3800), f=myts)
# If you run the above, you'll notice that still occasionally,
# you'll get a non-zero p-value (kind of odd)
normx <- rnorm(50,0,3)
new.perm.test(normx, qt, list(df=3), f=myts)
setwd("~/Research/GoF-Test")
rm(list=ls())
source("functions.R")
set.seed(5)
tx <- rt(100,3)
normx <- rnorm(100,0,sqrt(3))
new.perm.test(tx,qnorm,list(mean=0,sd=3) ,f=myts)
new.perm.test(normx,qnorm,list(mean=0,sd=3), f=myts)
new.perm.test(normx,qnorm,list(mean=0,sd=3800), f=myts)
# If you run the above, you'll notice that still occasionally,
# you'll get a non-zero p-value (kind of odd)
normx <- rnorm(50,0,3)
new.perm.test(normx, qt, list(df=3), f=myts)
new.perm.test(normx1, qt, list(df=3), f=myts)
normx1 <- rnorm(100,0,3)
new.perm.test(normx1, qt, list(df=3), f=myts)
normx1 <- rnorm(200,0,3)
new.perm.test(normx1, qt, list(df=3), f=myts)
normx1 <- rnorm(500,0,3)
new.perm.test(normx1, qt, list(df=3), f=myts)
myts(normx1, qt,3)
myts(normx1, qt,3,do.plot=TRUE)
myts(rt(500,3), qt,3,do.plot=TRUE)
myts(rt(500,3), qt,3,do.plot=TRUE)
myts(rt(500,3), qt,3,do.plot=TRUE)
myts(rt(500,3), qt,3,do.plot=TRUE)
?rep
dist <-  rep(myts(rt(500,3),qt,3), 300)
dist
?lapply
?apply
matx <- matrix(rt(50000,3),nrow=100,ncol=500)
apply(matx,margin=1, myts, qt,3)
matx <- matrix(rt(50000,3),nrow=100,ncol=500)
apply(matx,MARGIN=1, f=myts, qt,3)
dim(matx)
500*100
matx <- matrix(rt(50000,3),nrow=100,ncol=500)
apply(matx,MARGIN=1, f=myts, y=qt,3)
matx <- matrix(rt(50000,3),nrow=100,ncol=500)
myts
apply(matx,MARGIN=1, f=myts, qt,df=3)
apply(matx,MARGIN=1, f=myts, y=qt,df=3)
apply(matx,MARGIN=1, FUN=myts, y=qt,df=3)
matx <- matrix(rt(100000,3),nrow=100,ncol=1000)
dist <- apply(matx,MARGIN=1, FUN=myts, y=qt,df=3)
hist(dist)
dist
500*200
100000
matx <- matrix(rt(100000,3),nrow=200,ncol=500)
dist <- apply(matx,MARGIN=1, FUN=myts, y=qt,df=3)
hist(dist)
matx <- matrix(rt(100000,3),nrow=200,ncol=500)
dist <- apply(matx,MARGIN=1, FUN=myts, y=qt,df=3)
hist(dist)
matx <- matrix(rt(100000,3),nrow=200,ncol=500)
dist <- apply(matx,MARGIN=1, FUN=myts, y=qt,df=3)
hist(dist)
matx <- matrix(rt(1000000,3),nrow=2000,ncol=500)
dist <- apply(matx,MARGIN=1, FUN=myts, y=qt,df=3)
hist(dist)
?hist
normx1 <- rnorm(200,0,3)
hist(dist,breaks=20)
matx <- matrix(runif(1000000,min=0,max=2),nrow=2000,ncol=500)
dist <- apply(matx,MARGIN=1, FUN=myts, y=qunif,min=0, max=2)
hist(dist,breaks=20)
matx <- matrix(rt(1000000,3),nrow=2000,ncol=500)
dist <- apply(matx,MARGIN=1, FUN=myts, y=qt,df=3)
hist(dist,breaks=20, main="Distribution of myts under F0=t(3)")
plot_t_3 <- hist(dist,breaks=20, main="Distribution of myts under F0=t(3)")
plot_t_3
plot(plot_t_3)
plot(plot_t_3)
matx <- matrix(rt(1000000,3),nrow=2000,ncol=500)
dist <- apply(matx,MARGIN=1, FUN=myts, y=qt,df=3)
plot_t_3 <- hist(dist,breaks=20, main="Distribution of myts under F0=t(3)")
plot(plot_t_3)
# The distribution of myts (obviously) depends on the
# underlying null distribution
# Many of the distributions are pretty interesting
matx <- matrix(runif(1000000,min=0,max=2),nrow=2000,ncol=500)
dist <- apply(matx,MARGIN=1, FUN=myts, y=qunif,min=0, max=2)
plot_u_0_2 <- hist(dist,breaks=20 main="Distribution of myts under F0=U(0,2)")
plot(plot_u_0_2)
plot_u_0_2 <- hist(dist,breaks=20, main="Distribution of myts under F0=U(0,2)")
plot(plot_u_0_2)
boxplot(dist)
matx <- matrix(rt(1000000,3),nrow=2000,ncol=500)
dist <- apply(matx,MARGIN=1, FUN=myts, y=qt,df=3)
plot_t_3 <- hist(dist,breaks=20, main="Distribution of myts under F0=t(3)")
plot(plot_t_3)
boxplot(dist)
matx <- matrix(rnorm(1000000,0,3),nrow=2000,ncol=500)
dist <- apply(matx,MARGIN=1, FUN=myts, y=qt,df=3)
plot_n_03_t_3 <- hist(dist,breaks=20, main="Distribution of myts under F0=t(3)")
plot(plot_n_03_t_3)
qplot(dist)
library(ggplot2)
qplot(dist)
# Distribution of my ts under the null that F0=t(3)
matx_t_3 <- matrix(rt(1000000,3),nrow=2000,ncol=500)
dist_t_3 <- apply(matx_t_3,MARGIN=1, FUN=myts, y=qt,df=3)
plot_t_3 <- hist(dist_t_3,breaks=20, main="Distribution of myts under F0=t(3)")
plot(plot_t_3)
qplot(dist_t_3)
# distribution of myts when F=N(0,3) and the null is F0=t(3)
matx_n_03_t_3 <- matrix(rnorm(1000000,0,3),nrow=2000,ncol=500)
dist_n_03_t_3 <- apply(matx_n_03_t_3,MARGIN=1, FUN=myts, y=qt,df=3)
plot_n_03_t_3 <- hist(dist_n_03_t_3,breaks=20, main="Distribution of myts under F0=t(3)")
plot(plot_n_03_t_3)
qplot(dist_n_03_t_3)
?ggplot2
?ggplot
overlay_data <- data.frame(dist_t_3,dist_n_03_t_3)
head(overlay_data)
ggplot(data=overlay_data,aes(x=dist_t_3))
?geom
ggplot(data=overlay_data,aes(x=dist_t_3))+ geom_hist()
ggplot(data=overlay_data,aes(x=dist_t_3))+ geom_histogram()
overlay_plot <- ggplot(data=overlay_data,aes(x=dist_t_3))+ geom_histogram()
overlay_plot + geom_histogram(aes(x=dist_n_03_t_3))
overlay_plot
overlay_plot + geom_histogram(aes(x=dist_n_03_t_3))
overlay_plot
overlay_plot + geom_histogram(aes(x=dist_n_03_t_3))
overlay_plot + geom_histogram(aes(x=dist_n_03_t_3, color=red))
overlay_plot <- ggplot(data=overlay_data,aes(x=dist_t_3))+ geom_histogram() +theme_bw()
overlay_plot
overlay_plot <- ggplot(data=overlay_data,aes(x=dist_t_3))+ geom_histogram(aes(y=..density..) +theme_bw()
overlay_plot <- ggplot(data=overlay_data,aes(x=dist_t_3))+ geom_histogram(aes(y=..density..)) +theme_bw()
overlay_plot
ggplot(data=overlay_data,aes(x=dist_t_3)) +
geom_histogram(data=overlay_data[,1], fill="red", alpha=.2) +
geom_histogram(data=overlay_data[,2], fill="blue", alpha=.2)
?subset
ggplot(data=overlay_data,aes(x=dist_t_3)) +
geom_histogram(data=subset(overlay_data,select=1), fill="red", alpha=.2) +
geom_histogram(data=subset(overlay_data,select=2), fill="blue", alpha=.2)
overlay_data <- data.frame(dist_t_3,dist_n_03_t_3)
ggplot(data=overlay_data,aes(x=dist_t_3)) +
geom_histogram(data=subset(overlay_data, select=dist_t_3), fill="red", alpha=.2) +
geom_histogram(data=subset(overlay_data, select=dist_n_03_t_3), fill="blue", alpha=.2)
overlay_data <- data.frame(dist_t_3,dist_n_03_t_3)
head(overlay_data)
head(subset(overlay_data, select=dist_t_3))
head(subset(overlay_data, select=dist_n_03_t_3))
ggplot(data=overlay_data,aes(x=overlay_data)) +
geom_histogram(data=subset(overlay_data, select=dist_t_3), fill="red", alpha=.2) +
geom_histogram(data=subset(overlay_data, select=dist_n_03_t_3), fill="blue", alpha=.2)
dat <- data.frame(xx = c(runif(100,20,50),runif(100,40,80),runif(100,0,30)),yy = rep(letters[1:3],each = 100))
head(dat)
overlay_data <- data.frame(c(dist_t_3,dist_n_03_t_3)),rep(c(t_3,n_0_3_t_3),each=length(dist_t_3)))
length(c(dist_t_3,dist_n_03_t_3)))
length(c(dist_t_3,dist_n_03_t_3))
overlay_data <- data.frame(c(dist_t_3,dist_n_03_t_3),rep(c(t_3,n_0_3_t_3),each=length(dist_t_3)))
overlay_data <- data.frame(c(dist_t_3,dist_n_03_t_3),rep("a","b"),each=length(dist_t_3)))
overlay_data <- data.frame(c(dist_t_3,dist_n_03_t_3),rep(c("a","b"),each=length(dist_t_3)))
head(overlay_data)
qplot(dist_n_03_t_3)
x <- c(dist_t_3,dist_n_03_t_3)
overlay_data <- data.frame(x,rep(c("a","b"),each=length(dist_t_3)))
head(overlay_data)
x <- c(dist_t_3,dist_n_03_t_3)
y <- rep(c("a","b"),each=length(dist_t_3))
overlay_data <- data.frame(x,y)
head(overlay_data)
ggplot(data=overlay_data,aes(x=x)) +
geom_histogram(data=subset(overlay_data, y='a'), fill="red", alpha=.2) +
geom_histogram(data=subset(overlay_data, y='b'), fill="blue", alpha=.2)
ggplot(data=overlay_data,aes(x=x)) +
geom_histogram(data=subset(overlay_data, y=='a'), fill="red", alpha=.2) +
geom_histogram(data=subset(overlay_data, y=='b'), fill="blue", alpha=.2)
ggplot(data=overlay_data,aes(x=x)) +
geom_histogram(data=subset(overlay_data, y=='a'), fill="red", alpha=.2, xlim=c(0,50)) +
geom_histogram(data=subset(overlay_data, y=='b'), fill="blue", alpha=.2, xlim=c(0,50))
?xlim
ggplot(data=overlay_data,aes(x=x)) +
geom_histogram(data=subset(overlay_data, y=='a'), fill="red", alpha=.2)
+ coord_cartesian(=c(0,50)
geom_histogram(data=subset(overlay_data, y=='b'), fill="blue", alpha=.2)
ggplot(data=overlay_data,aes(x=x)) +
geom_histogram(data=subset(overlay_data, y=='a'), fill="red", alpha=.2)
+ coord_cartesian(xlim=c(0,50)
geom_histogram(data=subset(overlay_data, y=='b'), fill="blue", alpha=.2)
ggplot(data=overlay_data,aes(x=x)) +
geom_histogram(data=subset(overlay_data, y=='a'), fill="red", alpha=.2)
+ coord_cartesian(xlim=c(0,50))
geom_histogram(data=subset(overlay_data, y=='b'), fill="blue", alpha=.2)
?coord_cartesian
ggplot(data=overlay_data,aes(x=x)) +
geom_histogram(data=subset(overlay_data, y=='a'), fill="red", alpha=.2)
+ coord_cartesian(xlim=c(0,50))
geom_histogram(data=subset(overlay_data, y=='b'), fill="blue", alpha=.2)
ggplot(data=overlay_data,aes(x=x)) +
geom_histogram(data=subset(overlay_data, y=='a'), fill="red", alpha=.2)
+ coord_cartesian(xlim=c(0,50))
ggplot(data=overlay_data,aes(x=x)) +
geom_density(data=subset(overlay_data, y=='a'), fill="red", alpha=.2)
ggplot(data=overlay_data,aes(x=x)) +
geom_density(data=subset(overlay_data, y=='a'), fill="red", alpha=.2)
+ geom_histogram(data=subset(overlay_data, y=='b'), fill="blue", alpha=.2)
ggplot(data=overlay_data,aes(x=x)) +
geom_density(data=subset(overlay_data, y=='a'), fill="red", alpha=.2)
+ geom_density(data=subset(overlay_data, y=='b'), fill="blue", alpha=.2)
ggplot(data=overlay_data,aes(x=x)) +
geom_density(data=subset(overlay_data, y=='a'), fill="red", alpha=.2) +
geom_density(data=subset(overlay_data, y=='b'), fill="blue", alpha=.2)
ggplot(data=overlay_data,aes(x=x)) +
geom_density(data=subset(overlay_data, y=='a'), fill="red", alpha=.2) +
geom_density(data=subset(overlay_data, y=='b'), fill="blue", alpha=.2) +
coord_cartesian(xlim=c(0,5))
?quantile
quantile(x,probs=.95)
quantile(subset(overlay_data,y=='a',probs=.95)
)
quantile(subset(overlay_data,y=='a'),probs=.95)
quantile(dist_t_3,probs=.95)
quantile(dist_t_3_n_0_3,probs=.95)
quantile(dist_n_03_t_3,probs=.95)
ggplot(data=overlay_data,aes(x=x)) +
geom_density(data=subset(overlay_data, y=='a'), fill="red", alpha=.2) +
geom_density(data=subset(overlay_data, y=='b'), fill="blue", alpha=.2) +
coord_cartesian(xlim=c(0,5))
mean(dist_t_3)
mean(n_03_t_3)
mean(dist_n_03_t_3)
library(goftest)
cvm.test
save.image("~/Research/GoF-Test/July20.RData")
