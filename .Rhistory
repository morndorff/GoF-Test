wd.F <- wd(F.x(z), 1, family="DaubExPhase", bc="periodic")
wd.thresh<-threshold(wd.F,
levels=3:(nlevelsWT(wd.F)- 1),
type="soft",
policy="mannum",
by.level=FALSE,
value=4,
dev=var,
boundary=FALSE,
verbose = TRUE,
return.threshold=F)
F.thresh<- wr(wd.thresh)
plot(F.x)
mtext("N=4, Threshold=7.32032")
lines(z, F.thresh, col= "violetred" , lwd=2,type="l")
?threshold
# Reconstruction
wd.F <- wd(F.x(z), 2, family="DaubExPhase", bc="periodic")
wd.thresh<-threshold(wd.F,
levels=3:(nlevelsWT(wd.F)- 1),
type="soft",
policy="mannum",
by.level=FALSE,
value=4,
dev=var,
boundary=FALSE,
verbose = TRUE,
return.threshold=F)
F.thresh<- wr(wd.thresh)
plot(F.x)
mtext("N=4, Threshold=7.32032")
lines(z, F.thresh, col= "violetred" , lwd=2,type="l")
# Reconstruction
wd.F <- wd(F.x(z), 1, family="DaubExPhase", bc="periodic")
wd.thresh<-threshold(wd.F,
levels=3:(nlevelsWT(wd.F)- 1),
type="soft",
policy="mannum",
by.level=FALSE,
value=4,
dev=var,
boundary=FALSE,
verbose = TRUE,
return.threshold=F)
F.thresh<- wr(wd.thresh)
plot(F.x)
mtext("N=4, Threshold=7.32032")
lines(z, F.thresh, col= "violetred" , lwd=2,type="l")
F.dwt <- dwt(F.x(z), wf="haar", n.levels=log(n, 2))
# Reconstruction
wd.F <- wd(F.x(z), 1, family="DaubExPhase", bc="periodic")
wd.thresh<-threshold(wd.F,
levels=3:(nlevelsWT(wd.F)- 1),
type="soft",
policy="mannum",
by.level=FALSE,
value=8,
dev=var,
boundary=FALSE,
verbose = TRUE,
return.threshold=F)
F.thresh<- wr(wd.thresh)
plot(F.x)
mtext("N=4, Threshold=7.32032")
lines(z, F.thresh, col= "violetred" , lwd=2,type="l")
F.dwt <- dwt(F.x(z), wf="haar", n.levels=log(n, 2))
# Reconstruction
wd.F <- wd(F.x(z), 1, family="DaubExPhase", bc="periodic")
wd.thresh<-threshold(wd.F,
levels=3:(nlevelsWT(wd.F)- 1),
type="soft",
policy="mannum",
by.level=FALSE,
value=6,
dev=var,
boundary=FALSE,
verbose = TRUE,
return.threshold=F)
F.thresh<- wr(wd.thresh)
plot(F.x)
mtext("N=4, Threshold=7.32032")
lines(z, F.thresh, col= "violetred" , lwd=2,type="l")
wd.F <- wd(F.x(z), 1, family="DaubExPhase", bc="periodic")
wd.thresh<-threshold(wd.F,
levels=3:(nlevelsWT(wd.F)- 1),
type="soft",
policy="mannum",
by.level=FALSE,
value=3,
dev=var,
boundary=FALSE,
verbose = TRUE,
return.threshold=F)
F.thresh<- wr(wd.thresh)
plot(F.x)
mtext("N=4, Threshold=7.32032")
lines(z, F.thresh, col= "violetred" , lwd=2,type="l")
F.dwt <- dwt(F.x(z), wf="haar", n.levels=log(n, 2))
# Reconstruction
wd.F <- wd(F.x(z), 1, family="DaubExPhase", bc="periodic")
wd.thresh<-threshold(wd.F,
levels=3:(nlevelsWT(wd.F)- 1),
type="soft",
policy="mannum",
by.level=FALSE,
value=6,
dev=var,
boundary=FALSE,
verbose = TRUE,
return.threshold=F)
F.thresh<- wr(wd.thresh)
plot(F.x)
mtext("N=4, Threshold=7.32032")
lines(z, F.thresh, col= "violetred" , lwd=2,type="l")
F.dwt <- dwt(F.x(z), wf="haar", n.levels=log(n, 2))
# Reconstruction
wd.F <- wd(F.x(z), 1, family="DaubExPhase", bc="periodic")
wd.thresh<-threshold(wd.F,
levels=3:(nlevelsWT(wd.F)- 1),
type="hard",
policy="mannum",
by.level=FALSE,
value=6,
dev=var,
boundary=FALSE,
verbose = TRUE,
return.threshold=F)
F.thresh<- wr(wd.thresh)
plot(F.x)
mtext("N=4, Threshold=7.32032")
lines(z, F.thresh, col= "violetred" , lwd=2,type="l")
F.dwt <- dwt(F.x(z), wf="haar", n.levels=log(n, 2))
# Reconstruction
wd.F <- wd(F.x(z), 1, family="DaubExPhase", bc="periodic")
wd.thresh<-threshold(wd.F,
levels=3:(nlevelsWT(wd.F)- 1),
#type="hard",
policy="mannum",
by.level=FALSE,
value=6,
dev=var,
boundary=FALSE,
verbose = TRUE,
return.threshold=F)
F.thresh<- wr(wd.thresh)
plot(F.x)
mtext("N=4, Threshold=7.32032")
lines(z, F.thresh, col= "violetred" , lwd=2,type="l")
F.dwt <- dwt(F.x(z), wf="haar", n.levels=log(n, 2))
# Reconstruction
wd.F <- wd(F.x(z), 1, family="DaubExPhase", bc="periodic")
wd.thresh<-threshold(wd.F,
levels=3:(nlevelsWT(wd.F)- 1),
#type="hard",
policy="mannum",
by.level=FALSE,
value=1,
dev=var,
boundary=FALSE,
verbose = TRUE,
return.threshold=F)
F.thresh<- wr(wd.thresh)
plot(F.x)
mtext("N=4, Threshold=7.32032")
lines(z, F.thresh, col= "violetred" , lwd=2,type="l")
(min(x) + max(x))/2
wd.F
class(wd.F)
F.x <- ecdf(x)
n <- 2^5
z <- seq(min(x), max(x), length.out=n)
F.dwt <- dwt(F.x(z), wf="haar", n.levels=log(n, 2))
class(F.dwt)
F.dwt
wd.F
?waveslim
??waveslim
F.x <- ecdf(x)
n <- 2^5
z <- seq(min(x), max(x), length.out=n)
F.dwt <- dwt(F.x(z), wf="haar", n.levels=log(n, 2))
# Reconstruction
wd.F <- wd(F.x(z), 1, family="DaubExPhase", bc="periodic")
wd.thresh<-threshold(wd.F,
levels=3:(nlevelsWT(wd.F)- 1),
#type="hard",
policy="mannum",
by.level=FALSE,
value=6,
dev=var,
boundary=FALSE,
verbose = TRUE,
return.threshold=F)
F.thresh<- wr(wd.thresh)
plot(F.x)
mtext("N=4, Threshold=7.32032")
lines(z, F.thresh, col= "violetred" , lwd=2,type="l")
F.x <- ecdf(x)
n <- 2^5
z <- seq(min(x), max(x), length.out=n)
F.dwt <- dwt(F.x(z), wf="haar", n.levels=log(n, 2))
# Reconstruction
wd.F <- wd(F.x(z), 1, family="DaubExPhase", bc="periodic")
wd.thresh<-threshold(wd.F,
levels=3:(nlevelsWT(wd.F)- 1),
#type="hard",
policy="mannum",
by.level=FALSE,
value=2,
dev=var,
boundary=FALSE,
verbose = TRUE,
return.threshold=F)
F.thresh<- wr(wd.thresh)
plot(F.x)
mtext("N=4, Threshold=7.32032")
lines(z, F.thresh, col= "violetred" , lwd=2,type="l")
wd.F
wd.F$C
max(wd.F$C)
wd.F$D
z <- seq(min(x), max(x), length.out=n)
F.dwt <- dwt(F.x(z), wf="haar", n.levels=log(n, 2))
# Reconstruction
wd.F <- wd(F.x(z), 1, family="DaubExPhase", bc="periodic")
wd.thresh<-threshold(wd.F,
levels=3:(nlevelsWT(wd.F)- 1),
#type="hard",
policy="mannum",
by.level=FALSE,
value=4,
dev=var,
boundary=FALSE,
verbose = TRUE,
return.threshold=F)
F.thresh<- wr(wd.thresh)
plot(F.x)
mtext("N=4, Threshold=7.32032")
lines(z, F.thresh, col= "violetred" , lwd=2,type="l")
F.dwt <- dwt(F.x(z), wf="haar", n.levels=log(n, 2))
# Reconstruction
wd.F <- wd(F.x(z), 1, family="DaubExPhase", bc="periodic")
wd.thresh<-threshold(wd.F,
levels=3:(nlevelsWT(wd.F)- 1),
#type="hard",
policy="mannum",
by.level=FALSE,
value=32,
dev=var,
boundary=FALSE,
verbose = TRUE,
return.threshold=F)
F.thresh<- wr(wd.thresh)
plot(F.x)
mtext("N=4, Threshold=7.32032")
lines(z, F.thresh, col= "violetred" , lwd=2,type="l")
F.dwt <- dwt(F.x(z), wf="haar", n.levels=log(n, 2))
# Reconstruction
wd.F <- wd(F.x(z), 1, family="DaubExPhase", bc="periodic")
wd.thresh<-threshold(wd.F,
levels=3:(nlevelsWT(wd.F)- 1),
#type="hard",
policy="mannum",
by.level=FALSE,
value=30,
dev=var,
boundary=FALSE,
verbose = TRUE,
return.threshold=F)
F.thresh<- wr(wd.thresh)
plot(F.x)
mtext("N=4, Threshold=7.32032")
lines(z, F.thresh, col= "violetred" , lwd=2,type="l")
?wd
wd.F$nlevelsWT
wd.F
wd.F$C
wd.F <- wd(F.x(z),
filter.numer=1,
family="DaubExPhase",
bc="periodic")
F.x <- ecdf(x)
n <- 2^5
z <- seq(min(x), max(x), length.out=n)
F.dwt <- dwt(F.x(z), wf="haar", n.levels=log(n, 2))
# Reconstruction
wd.F <- wd(F.x(z),
filter.number=1,
family="DaubExPhase",
bc="periodic")
wd.F$nlevelsWT
wd.F$C
F.x <- ecdf(x)
n <- 2^5
z <- seq(min(x), max(x), length.out=n)
F.dwt <- dwt(F.x(z), wf="haar", n.levels=log(n, 2))
# Reconstruction
wd.F <- wd(F.x(z),
filter.number=1,
family="DaubExPhase",
bc="periodic")
wd.F$C
F.dwt
?dwt
log(32)
log(32,2)
F.dwt_4 <- dwt(F.x(z), wf="haar", n.levels=4)
F.dwt_4
wave.energy(x, y, doplot=TRUE)
?rev
source("functions.R")
wave.energy(x, y, doplot=TRUE)
wave.energy(x, y, doplot=TRUE, square=TRUE)
wave.energy(x, y, doplot=TRUE, square=TRUE)
wave.energy(x, y, doplot=TRUE, square=TRUE, opt="sum")
perm.test(x,y, f="wave.energy")
perm.test(x,y, f="wave.energy", fops=list(opt="sum"))
x
y
x <- rnorm(50)
y <- rnorm(50,0,2)
perm.test(x,y, f="wave.energy", fops=list(opt="sum"))
perm.test(x,y, f="wave.energy", fops=list(opt="max"))
perm.test(x,y, f="wave.energy", fops=list(opt="sum"))
perm.test(x,y, f="wave.energy", fops=list(opt="sum",square=TRUE))
perm.test(x,y, f="wave.energy", fops=list(opt="sum",square=FALSE))
wave.energy(x,y, opt="sum", square=FALSE)
perm.test(x,y, f="wave.energy", fops=list(opt="sum",square=FALSE))
perm.test(x,y, f="wave.energy", fops=list(opt="sum",square=TRUE))
perm.test(x,y, f="wave.energy", fops=list(opt="max",square=TRUE))
perm.test(x,y, f="wave.energy", fops=list(opt="max",square=FALSE))
source("functions.R")
wave.energy(x,y, opt="sum", square=FALSE)
wave.energy(x,y, opt="sum", square=TRUE)
source("functions.R")
wave.energy(x,y, opt="sum", square=FALSE)
wave.energy(x,y, opt="sum", square=TRUE)
testx <- c(1,2,3)
testx%2
testx^2
sort(testx^2_
sort(testx^2)
sort(testx^2, decreasing=TRUE)
max(xx)
nums <- wave.energy(x,y, opt="sum", square=TRUE)
nums[[1]]
max(nums[[1]])
source("functions.R")
nums <- wave.energy(x,y, opt="sum", square=TRUE)
nums
cumsum(nums)
x <- rnorm(100)
y <- rnorm(100)
source("functions.R")
source("functions.R")
perm.test(x,y, f="wave.energy", fops=list(opt="max",square=FALSE))
perm.test(x,y, f="wave.energy", fops=list(opt="max",square=TRUE))
perm.test(x,y, f="wave.energy", fops=list(opt="sum",square=FALSE))
perm.test(x,y, f="wave.energy", fops=list(opt="sum",square=TRUE))
source("functions.R")
perm.test(x,y, f="wave.energy", fops=list(opt="sum",square=TRUE, norm=TRUE))
source("functions.R")
perm.test(x,y, f="wave.energy", fops=list(opt="sum",square=TRUE, norm=TRUE))
perm.test(x,y, f="wave.energy", fops=list(opt="sum",square=TRUE, norm=FALSE))
wave.energy(x,y, opt="sum", square=TRUE)
wave.energy(x,y, opt="sum", square=TRUE, doplot=TRUE)
wave.energy(x,y, opt="sum", square=TRUE, doplot=TRUE, norm=FALSE)
x
y
y <- y[1:49]
wave.energy(x,y, opt="sum", square=TRUE, doplot=TRUE, norm=FALSE)
wave.energy(x,y, opt="sum", square=TRUE, doplot=TRUE, norm=FALSE)
source("functions.R")
make_sample(100,rnorm,0,1)
make_sample(100,rnorm,params=list(mean=0, sd=1))
make_sample(100,dist=norm,params=list(mean=0, sd=1))
make_sample(100,dist=runif,1)
make_sample(100,dist=rexp,1)
make_sample(100,dist=exp,1)
make_sample(100,dist="rnorm",params=list(mean=0, sd=1))
make_sample(100,dist="norm",params=list(mean=0, sd=1))
?matrix
Sim_IC_Process <- function(num.samp, run.length, dist, params){
# Simulates a process of run length N with samples of size k
# Inputs:
# num.samp: The size of the samples. 1 corresponds to one data point per run unit
# run.length: Length of the run
# dist: what distribution do the data come from
# params: what parameters to call from the dist function
total_samps <- num.samp*run.length
Proc <- matrix(make_sample(total_samps,dist,params),nrow=num.samp,ncol=run.length)
}
Sim_IC_Process(20,20,"norm",list(mean=0, sd=1))
Process <- Sim_IC_Process(20,20,"norm",list(mean=0, sd=1))
Process
?vector
?apply
Track_Stat <- function(proc,stat){
track <- vector(mode="list",length=dim(proc,2))
x <- apply(proc,2,stat)
}
Process <- Sim_IC_Process(20,20,"norm",list(mean=0, sd=1))
track <- Track_Stat(Process,stat=mean)
dim(Process)
Track_Stat <- function(proc,stat){
track <- vector(mode="list",length=dim(proc)[2])
x <- apply(proc,2,stat)
}
track <- Track_Stat(Process,stat=mean)
track
seq_along(dim(proc)[1])
seq_along(dim(Process)[1])
Track_Stat <- function(proc,stat,doplot=FALSE){
track <- vector(mode="list",length=dim(proc)[2])
x <- apply(proc,2,stat)
if(doplot){
plot(seq(1:dim(proc)[1]),x)
}
Track_Stat <- function(proc,stat,doplot=FALSE){
track <- vector(mode="list",length=dim(proc)[2])
x <- apply(proc,2,stat)
if(doplot){
plot(seq(1:dim(proc)[1]),x)
}
}
track <- Track_Stat(Process,stat=mean,doplot=TRUE)
Track_Stat <- function(proc,stat,doplot=FALSE){
track <- vector(mode="list",length=dim(proc)[2])
x <- apply(proc,2,stat)
if(doplot){
plot(seq(1:dim(proc)[1]),x)
title("Statistic on Each Sample")
}
}
?apply
testfun <- function(){
x <- runif(1)
if(runif>.5) y <- c(1,1)
if(runif <.5) y <- c(1)
}
testfun()
testfun <- function(){
x <- runif(1)
if(x>.5) y <- c(1,1)
if(x <.5) y <- c(1)
}
testfun()
testfun <- function(){
x <- runif(1)
if(x>.5) y <- c(1,1)
if(x <.5) y <- c(1)
}
testfun <- function(){
x <- runif(1)
if(x>.5) y <- c(1,1)
if(x <.5) y <- c(1)
y}
testfun()
testfun()
testfun()
testfun()
Track_Stat(Process,tesfun)
Track_Stat(Process,testfun)
Track_Stat(Process,mean)
Process
Track_Stat(Process,mean)
Track_Stat(Process,testfun)
testfun <- function(a){
x <- runif(1)
if(x>.5) y <- c(1,1)
if(x <.5) y <- c(1)
y}
Track_Stat(Process,testfun)
test <- Track_Stat(Process,testfun)
test
testfun()
testfun()
testfun()
testfun(.5)
testfun(.5)
testfun(.5)
testfun(.5)
testfun(.5)
test <- Track_Stat(Process,testfun)
test
testfun
testfun()
testfun()
testfun()
testfun()
testfun()
testfun()
Track_Stat <- function(proc,stat,doplot=FALSE){
# Tracks the value of a statistic for a process
# Inputs:
# proc: A matrix containing the process
# stat: the statistic tracked
track <- vector(mode="list",length=dim(proc)[2])
x <- apply(proc,2,stat)
if(doplot){
plot(seq(1:dim(proc)[1]),x)
title("Statistic on Each Sample")
}
}
test <- Track_Stat(Process,testfun)
test
apply(Process,2,testfun)
test <- Track_Stat(proc=Process,stat=testfun)
test
Track_Stat(proc=Process,stat=testfun)
Track_Stat(proc=Process,stat=testfun,doplot)
Track_Stat(proc=Process,stat=testfun,doplot=TRUE)
