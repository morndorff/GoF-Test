...)
UCL <- c(.01,.1, length.out=10)
ARL_Curve_SA <- ARL_Proc(UCL, time=60,
method=Find_IC_RL_Fast,
tstat=wave.energy,
dist="norm",
params=list(mean=0, sd=1))
# Finding ARLs for energy.curve method
UCL <- c(.01,.06, length.out=10)
ARL_Curve_SA <- ARL_Proc(UCL, time=15,
method=Find_IC_RL_Fast,
tstat=wave.energy,
dist="norm",
params=list(mean=0, sd=1))
rm(list=ls())
source("functions.R")
library(waveslim)
set.seed(5)
# Finding ARLs for energy.curve method
UCL <- c(.01,.05, length.out=10)
ARL_Curve_SA <- ARL_Proc(UCL, time=15,
method=Find_IC_RL_Fast,
tstat=wave.energy,
dist="norm",
params=list(mean=0, sd=1))
UCL <- c(.01,.03, length.out=10)
ARL_Curve_SA <- ARL_Proc(UCL, time=15,
method=Find_IC_RL_Fast,
tstat=wave.energy,
dist="norm",
params=list(mean=0, sd=1))
UCL <- c(.01,.02, length.out=10)
ARL_Curve_SA <- ARL_Proc(UCL, time=15,
method=Find_IC_RL_Fast,
tstat=wave.energy,
dist="norm",
params=list(mean=0, sd=1))
set.seed(5)
UCL <- seq(.01, .06, length.out=10)
test <- Find_IC_RL_Fast(num.samp=30, dist="norm",
params=list(mean=0, sd=1),
tstat=wave.energy,
UCL=UCL,
detail=TRUE, weight=FALSE)
test
rm(list=ls())
source("functions.R")
library(waveslim)
set.seed(5)
# Finding ARLs for energy.curve method
UCL <- c(.01,.02, length.out=10)
ARL_Curve_SA <- ARL_Proc(UCL=UCL, time=1,
method=Find_IC_RL_Fast,
tstat=wave.energy,
dist="norm",
params=list(mean=0, sd=1))
test <- Find_IC_RL_Fast(num.samp=30, dist="norm",
params=list(mean=0, sd=1),
tstat=wave.energy,
UCL=UCL,
detail=TRUE, weight=FALSE)
UCL <- c(.01,.02, length.out=10)
ARL_Curve_SA <- ARL_Proc(UCL=UCL, time=1,
method=Find_IC_RL_Fast,
tstat=wave.den,
dist="norm",
params=list(mean=0, sd=1))
rm(list=ls())
source("functions.R")
library(waveslim)
set.seed(5)
# Finding ARLs for energy.curve method
UCL <- c(.01,.02, length.out=10)
ARL_Curve_SA <- ARL_Proc(UCL=UCL, time=1,
method=Find_IC_RL_Fast,
tstat=wave.den,
dist="norm",
params=list(mean=0, sd=1))
set.seed(5)
UCL <- seq(.01, .06, length.out=10)
test <- Find_IC_RL_Fast(num.samp=30, dist="norm",
params=list(mean=0, sd=1),
tstat=wave.energy,
UCL=UCL,
detail=TRUE, weight=FALSE)
Plots(test, weight="Average")
rm(list=ls())
source("functions.R")
library(waveslim)
set.seed(5)
# Finding ARLs for energy.curve method
UCL <- c(.01,.02, length.out=10)
ARL_Curve_SA <- ARL_Proc(UCL=UCL, time=1,
method=Find_IC_RL_Fast,
tstat=wave.den,
dist="norm",
params=list(mean=0, sd=1))
rm(list=ls())
source("functions.R")
library(waveslim)
set.seed(5)
# Finding ARLs for energy.curve method
UCL <- c(.01,.02, length.out=10)
ARL_Curve_SA <- ARL_Proc(UCL=UCL, time=0,
method=Find_IC_RL_Fast,
tstat=wave.den,
dist="norm",
params=list(mean=0, sd=1))
rm(list=ls())
source("functions.R")
library(waveslim)
set.seed(5)
# Finding ARLs for energy.curve method
UCL <- c(.01,.02, length.out=10)
ARL_Curve_SA <- ARL_Proc(UCL=UCL, time=.1,
method=Find_IC_RL_Fast,
tstat=wave.den,
dist="norm",
params=list(mean=0, sd=1))
rm(list=ls())
source("functions.R")
library(waveslim)
set.seed(5)
# Finding ARLs for energy.curve method
UCL <- c(.01,.02, length.out=10)
ARL_Curve_SA <- ARL_Proc(UCL=UCL, time=.1,
method=Find_IC_RL_Fast,
tstat=wave.den,
dist="norm",
params=list(mean=0, sd=1))
Find_IC_RL_Fast(num.samp=30, dist="norm", params=list(mean=0, sd=2), tstat=wave.energy, UCL=c(.01,.02))
rm(list=ls())
source("functions.R")
library(waveslim)
set.seed(5)
# Finding ARLs for energy.curve method
UCL <- seq(.01,.02, length.out=10)
ARL_Curve_SA <- ARL_Proc(UCL=UCL, time=.1,
method=Find_IC_RL_Fast,
tstat=wave.den,
dist="norm",
params=list(mean=0, sd=1))
rm(list=ls())
source("functions.R")
library(waveslim)
set.seed(5)
# Finding ARLs for energy.curve method
UCL <- seq(.01,.02, length.out=10)
ARL_Curve_SA <- ARL_Proc(UCL=UCL, time=4,
method=Find_IC_RL_Fast,
tstat=wave.den,
dist="norm",
params=list(mean=0, sd=1))
rm(list=ls())
source("functions.R")
library(waveslim)
set.seed(5)
# Finding ARLs for energy.curve method
UCL <- seq(.01,.06, length.out=10)
ARL_Curve_SA <- ARL_Proc(UCL=UCL, time=15,
method=Find_IC_RL_Fast,
tstat=wave.den,
dist="norm",
params=list(mean=0, sd=1))
rm(list=ls())
source("functions.R")
library(waveslim)
set.seed(5)
# Finding ARLs for energy.curve method
UCL <- seq(.01,.1, length.out=10)
ARL_Curve_SA <- ARL_Proc(UCL=UCL, time=15,
method=Find_IC_RL_Fast,
tstat=wave.den,
dist="norm",
params=list(mean=0, sd=1))
rm(list=ls())
source("functions.R")
library(waveslim)
set.seed(5)
# Finding ARLs for energy.curve method
UCL <- seq(.05,.6, length.out=10)
ARL_Curve_SA <- ARL_Proc(UCL=UCL, time=15,
method=Find_IC_RL_Fast,
tstat=wave.den,
dist="norm",
params=list(mean=0, sd=1))
# SPS Testing, Take 7
rm(list=ls())
source("functions.R")
library(waveslim)
set.seed(5)
# Finding ARLs for energy.curve method
UCL <- seq(.05,.3, length.out=10)
ARL_Curve_SA <- ARL_Proc(UCL=UCL, time=15,
method=Find_IC_RL_Fast,
tstat=wave.den,
dist="norm",
params=list(mean=0, sd=1))
rm(list=ls())
source("functions.R")
library(waveslim)
set.seed(5)
# Finding ARLs for energy.curve method
UCL <- seq(.05,.4, length.out=10)
ARL_Curve_SA <- ARL_Proc(UCL=UCL, time=60,
method=Find_IC_RL_Fast,
tstat=wave.den,
dist="norm",
params=list(mean=0, sd=1))
str(ARL_Curve_SA)
ARL_Curve_SA[1]
UCL <- seq(.05,.4, length.out=10)
ARL_Curve_B <- ARL_Proc(UCL=UCL, time=60,
method=Find_IC_RL_Fast,
tstat=wave.den,
dist="norm",
params=list(mean=0, sd=1),
weight=TRUE)
ARL_Curve_B_Mat <- ARL_Curve_SA[[1]] # Biased ARL
ARL_Curve_B_Mat
ARL_Curve_B_Mat <- ARL_Curve_B[[1]] # Biased ARL
ARL_Curve_B_Mat
UCL <- seq(.05,.6, length.out=10)
ARL_Curve_B <- ARL_Proc(UCL=UCL, time=60,
method=Find_IC_RL_Fast,
tstat=wave.den,
dist="norm",
params=list(mean=0, sd=1),
weight=TRUE)
ARL_Curve_B_Mat <- ARL_Curve_B[[1]] # Biased ARL
UCL <- seq(.05,1, length.out=10)
ARL_Curve_B <- ARL_Proc(UCL=UCL, time=60,
method=Find_IC_RL_Fast,
tstat=wave.den,
dist="norm",
params=list(mean=0, sd=1),
weight=TRUE)
ARL_Curve_B_Mat <- ARL_Curve_B[[1]] # Biased ARL
colnames(ARL_Curve_B_Mat)
y <- ARL_Curve_SA_Mat[1,]
lm(y~UCL)
ARL_Curve_SA_Mat <- ARL_Curve_SA[[1]] # Sample Average ARL
y <- ARL_Curve_SA_Mat[1,]
lm(y~UCL)
?predict
lm_SA <- lm(y~UCL)
predict(lm_SA,data=200)
predict(lm_SA,newdata=200)
predict(object=lm_SA,newdata=data.frame(200))
predict(object=lm_SA,newdata=data.frame(x = 200))
lm_SA <- lm(y~UCL)
predict(object=lm_SA,newdata=data.frame(x = 200))
y
UCL
as.numeric(y)
y <- as.numeric(ARL_Curve_SA_Mat[1,])
lm_SA <- lm(y~UCL)
predict(object=lm_SA,newdata=data.frame(x = 200))
UCL
y
data.frame(x = 200)
lm(y~UCL)
seq(-3,3,.5)
length(seq(-3,3,.5)
)
y <- as.numeric(ARL_Curve_SA_Mat[1,])
lm_SA <- lm(y~UCL)
predict(lm_SA,data.frame(x = 200))
y <- as.numeric(ARL_Curve_SA_Mat[1,])
lm_SA <- lm(UCL~y)
predict(lm_SA,data.frame(y = 200))
ARL <- as.numeric(ARL_Curve_SA_Mat[1,])
lm_SA <- lm(UCL~ARL)
predict(lm_SA,data.frame(ARL = 200))
plot(lm_SA)
ARL <- as.numeric(ARL_Curve_SA_Mat[1,])
lm_SA <- lm(log(UCL)~ARL)
predict(lm_SA,data.frame(ARL = 200))
plot(lm_SA)
lm_SA <- lm(exp(UCL)~ARL)
predict(lm_SA,data.frame(ARL = 200))
plot(lm_SA)
?gam
??gam
library(gam)
install.packages("gam")
install.packages("gam")
?gam
library(gam)
?gam
gam_SA <- gam(UCL~ARL)
predict(gam_SA, data.frame(ARL=200))
plot(gam_SA)
?gam
gam_SA <- gam(UCL~s(ARL))
predict(gam_SA, data.frame(ARL=200))
plot(gam_SA)
ARL_Curve_SA_Mat
ARL
?predict.gam
predict(gam_SA, data.frame(ARL=200))
predict(gam_SA)
plot(gam_SA)
summary(gam_SA)
gam_SA <- gam(UCL~s(ARL))
predict(gam_SA, newdata=data.frame(ARL=200))
plot(gam_SA)
predict(gam_SA, newdata=data.frame(ARL=100))
plot(ARL,UCL)
plot(ARL,log(UCL))
plot(ARL,exp(UCL))
plot(ARL,UCL^2)
plot(ARL,UCL^3)
f <- approxfun(ARL,UCL)
f(200)
ARL_Curve_B_Mat <- ARL_Curve_B[[1]] # Biased ARL
ARL <- as.numeric(ARL_Curve_B_Mat[1,])
f <- approxfun(ARL,UCL)
ARL_B_200 <- f(200)
ARL_B_200
ARL_Curve_B_Mat <- ARL_Curve_B[[1]] # Biased ARL
ARL <- as.numeric(ARL_Curve_B_Mat[1,])
f <- approxfun(ARL,UCL)
UCL_B_200 <- f(200)
ARL_Curve_SA_Mat <- ARL_Curve_SA[[1]] # Sample Average ARL
ARL <- as.numeric(ARL_Curve_SA_Mat[1,])
f <- approxfun(ARL,UCL)
UCL_SA_200 <- f(200)
UCL_SA_200
UCL_B_200
test <- Find_IC_RL_Fast(num.samp=30, dist="norm",
params=list(mean=0, sd=1),
tstat=wave.energy,
UCL=UCL_SA_200,
detail=TRUE, weight=FALSE)
UCL_SA_200
ARL <- as.numeric(ARL_Curve_SA_Mat[1,])
f <- approxfun(ARL,UCL)
UCL_SA_200 <- f(200)
ARL
plot(f)
f(200)
ARL
UCL
UCL <- seq(.05,.4, length.out=10)
f <- approxfun(ARL,UCL)
UCL_SA_200 <- f(200)
UCL_SA_200
test <- Find_IC_RL_Fast(num.samp=30, dist="norm",
params=list(mean=0, sd=1),
tstat=wave.energy,
UCL=UCL_SA_200,
detail=TRUE, weight=FALSE)
test <- Find_IC_RL_Fast(num.samp=30, dist="norm",
params=list(mean=0, sd=1),
tstat=wave.den,
UCL=UCL_SA_200,
detail=TRUE, weight=FALSE)
rm(list=ls())
source("functions.R")
library(waveslim)
set.seed(5)
# Finding ARLs for energy.curve method
UCL <- seq(.05,.4, length.out=10)
ARL_Curve_SA <- ARL_Proc(UCL=UCL, time=60,
method=Find_IC_RL_Fast,
tstat=wave.energy,
dist="norm",
params=list(mean=0, sd=1))
rm(list=ls())
source("functions.R")
library(waveslim)
set.seed(5)
# Finding ARLs for energy.curve method
UCL <- seq(.05,.1, length.out=10)
ARL_Curve_SA <- ARL_Proc(UCL=UCL, time=1,
method=Find_IC_RL_Fast,
tstat=wave.energy,
dist="norm",
params=list(mean=0, sd=1))
rm(list=ls())
source("functions.R")
library(waveslim)
set.seed(5)
# Finding ARLs for energy.curve method
UCL <- seq(.01,.05, length.out=10)
ARL_Curve_SA <- ARL_Proc(UCL=UCL, time=1,
method=Find_IC_RL_Fast,
tstat=wave.energy,
dist="norm",
params=list(mean=0, sd=1))
ARL_Curve_SA_Mat <- ARL_Curve_SA[[1]] # Sample Average ARL
ARL <- as.numeric(ARL_Curve_SA_Mat[1,])
f <- approxfun(ARL,UCL)
UCL_SA_200 <- f(200)
rm(list=ls())
source("functions.R")
library(waveslim)
set.seed(5)
# Finding ARLs for energy.curve method
UCL <- seq(.01,.07, length.out=10)
ARL_Curve_SA <- ARL_Proc(UCL=UCL, time=60,
method=Find_IC_RL_Fast,
tstat=wave.energy,
dist="norm",
params=list(mean=0, sd=1))
ARL_Curve_SA_Mat <- ARL_Curve_SA[[1]] # Sample Average ARL
ARL <- as.numeric(ARL_Curve_SA_Mat[1,])
f <- approxfun(ARL,UCL)
UCL_SA_200 <- f(200)
test <- Find_IC_RL_Fast(num.samp=30, dist="norm",
params=list(mean=0, sd=1),
tstat=wave.energy,
UCL=UCL_SA_200,
detail=TRUE, weight=FALSE)
test
test <- Find_IC_RL_Fast(num.samp=30, dist="norm",
params=list(mean=0, sd=2),
tstat=wave.energy,
UCL=UCL_SA_200,
detail=TRUE, weight=FALSE)
test
test <- Find_IC_RL_Fast(num.samp=30, dist="norm",
params=list(mean=5, sd=2),
tstat=wave.energy,
UCL=UCL_SA_200,
detail=TRUE, weight=FALSE)
plot(test[[1]])
test <- Find_IC_RL_Fast(num.samp=30, dist="norm",
params=list(mean=5, sd=2),
tstat=wave.energy,
UCL=UCL_SA_200,
detail=TRUE, weight=FALSE)
Plots(test, weight="Average")
Plots <- function (test, weight="Biased") {
plot(test[[1]], main=paste("Plot of Test Statistic h(t), Weight=",weight), type="l") # Weight = Biased Towards Extreme Obs?
hist(test[[7]], main="Tau Chosen (Raw)") # Which Tau is Chosen?
hist(test[[8]], main="Tau Chosen (Chosen/Time)") # Tau Chosen Divided by Time (Scaled 0-1)
d <- density(test[[8]], adjust=.5)
plot(d, , "gaussian", xlim=c(0,1), main="Tau/T Chosen at Each Step") #Kernel Density Estimate
quantile(test[[8]], probs=seq(0,1,.1)) # Quantiles of Tau/T
}
Plots(test, weight="Average")
test <- Find_IC_RL_Fast(num.samp=30, dist="norm",
params=list(mean=30, sd=2),
tstat=wave.energy,
UCL=UCL_SA_200,
detail=TRUE, weight=FALSE)
Plots(test, weight="Average")
test <- Find_IC_RL_Fast(num.samp=30, dist="norm",
params=list(mean=30, sd=2),
tstat=wave.energy,
UCL=UCL_SA_200,
detail=TRUE, weight=FALSE)
Plots(test, weight="Average")
test <- Find_IC_RL_Fast(num.samp=30, dist="norm",
params=list(mean=30, sd=2),
tstat=wave.energy,
UCL=UCL_SA_200,
detail=TRUE, weight=FALSE)
Plots(test, weight="Average")
test <- Find_IC_RL_Fast(num.samp=30, dist="norm",
params=list(mean=30, sd=2),
tstat=wave.energy,
UCL=UCL_SA_200,
detail=TRUE, weight=FALSE)
Plots(test, weight="Average")
test <- Find_IC_RL_Fast(num.samp=30, dist="norm",
params=list(mean=30, sd=2),
tstat=wave.energy,
UCL=UCL_SA_200,
detail=TRUE, weight=FALSE)
Plots(test, weight="Average")
test <- Find_IC_RL_Fast(num.samp=30, dist="norm",
params=list(mean=30, sd=2),
tstat=wave.energy,
UCL=UCL_SA_200,
detail=TRUE, weight=FALSE)
Plots(test, weight="Average")
test <- Find_IC_RL_Fast(num.samp=30, dist="norm",
params=list(mean=30, sd=2),
tstat=wave.energy,
UCL=UCL_SA_200,
detail=TRUE, weight=FALSE)
Plots(test, weight="Average")
?hist
Plots <- function (test, weight="Biased") {
plot(test[[1]], main=paste("Plot of Test Statistic h(t), Weight=",weight), type="l") # Weight = Biased Towards Extreme Obs?
hist(test[[7]], main="Tau Chosen (Raw)") # Which Tau is Chosen?
hist(test[[8]], main="Tau Chosen (Chosen/Time)", bin=20) # Tau Chosen Divided by Time (Scaled 0-1)
d <- density(test[[8]], adjust=.5)
plot(d, , "gaussian", xlim=c(0,1), main="Tau/T Chosen at Each Step") #Kernel Density Estimate
quantile(test[[8]], probs=seq(0,1,.1)) # Quantiles of Tau/T
}
Plots(test, weight="Average")
Plots <- function (test, weight="Biased") {
plot(test[[1]], main=paste("Plot of Test Statistic h(t), Weight=",weight), type="l") # Weight = Biased Towards Extreme Obs?
hist(test[[7]], main="Tau Chosen (Raw)") # Which Tau is Chosen?
hist(test[[8]], main="Tau Chosen (Chosen/Time)", breaks=20) # Tau Chosen Divided by Time (Scaled 0-1)
d <- density(test[[8]], adjust=.5)
plot(d, , "gaussian", xlim=c(0,1), main="Tau/T Chosen at Each Step") #Kernel Density Estimate
quantile(test[[8]], probs=seq(0,1,.1)) # Quantiles of Tau/T
}
Plots(test, weight="Average")
Plots <- function (test, weight="Biased") {
plot(test[[1]], main=paste("Plot of Test Statistic h(t), Weight=",weight), type="l") # Weight = Biased Towards Extreme Obs?
hist(test[[7]], main="Tau Chosen (Raw)") # Which Tau is Chosen?
hist(test[[8]], main="Tau Chosen (Chosen/Time)", breaks=20) # Tau Chosen Divided by Time (Scaled 0-1)
d <- density(test[[8]], adjust=.5)
plot(d, , "gaussian", xlim=c(0,1), main="Tau/T Chosen at Each Step") #Kernel Density Estimate
quantile(test[[8]], probs=seq(0,1,.1)) # Quantiles of Tau/T
}
