<<<<<<< HEAD
...)
UCL <- c(.01,.1, length.out=10)
ARL_Curve_SA <- ARL_Proc(UCL, time=60,
method=Find_IC_RL_Fast,
tstat=wave.energy,
dist="norm",
params=list(mean=0, sd=1))
# Finding ARLs for energy.curve method
UCL <- c(.01,.06, length.out=10)
ARL_Curve_SA <- ARL_Proc(UCL, time=15,
method=Find_IC_RL_Fast,
tstat=wave.energy,
dist="norm",
params=list(mean=0, sd=1))
rm(list=ls())
source("functions.R")
library(waveslim)
set.seed(5)
# Finding ARLs for energy.curve method
UCL <- c(.01,.05, length.out=10)
ARL_Curve_SA <- ARL_Proc(UCL, time=15,
method=Find_IC_RL_Fast,
tstat=wave.energy,
dist="norm",
params=list(mean=0, sd=1))
UCL <- c(.01,.03, length.out=10)
ARL_Curve_SA <- ARL_Proc(UCL, time=15,
method=Find_IC_RL_Fast,
tstat=wave.energy,
dist="norm",
params=list(mean=0, sd=1))
UCL <- c(.01,.02, length.out=10)
ARL_Curve_SA <- ARL_Proc(UCL, time=15,
method=Find_IC_RL_Fast,
tstat=wave.energy,
dist="norm",
params=list(mean=0, sd=1))
set.seed(5)
UCL <- seq(.01, .06, length.out=10)
test <- Find_IC_RL_Fast(num.samp=30, dist="norm",
params=list(mean=0, sd=1),
tstat=wave.energy,
UCL=UCL,
detail=TRUE, weight=FALSE)
test
rm(list=ls())
source("functions.R")
library(waveslim)
set.seed(5)
# Finding ARLs for energy.curve method
UCL <- c(.01,.02, length.out=10)
ARL_Curve_SA <- ARL_Proc(UCL=UCL, time=1,
method=Find_IC_RL_Fast,
tstat=wave.energy,
dist="norm",
params=list(mean=0, sd=1))
test <- Find_IC_RL_Fast(num.samp=30, dist="norm",
params=list(mean=0, sd=1),
tstat=wave.energy,
UCL=UCL,
detail=TRUE, weight=FALSE)
UCL <- c(.01,.02, length.out=10)
ARL_Curve_SA <- ARL_Proc(UCL=UCL, time=1,
method=Find_IC_RL_Fast,
tstat=wave.den,
dist="norm",
params=list(mean=0, sd=1))
rm(list=ls())
source("functions.R")
library(waveslim)
set.seed(5)
# Finding ARLs for energy.curve method
UCL <- c(.01,.02, length.out=10)
ARL_Curve_SA <- ARL_Proc(UCL=UCL, time=1,
method=Find_IC_RL_Fast,
tstat=wave.den,
dist="norm",
params=list(mean=0, sd=1))
set.seed(5)
UCL <- seq(.01, .06, length.out=10)
test <- Find_IC_RL_Fast(num.samp=30, dist="norm",
params=list(mean=0, sd=1),
tstat=wave.energy,
UCL=UCL,
detail=TRUE, weight=FALSE)
Plots(test, weight="Average")
rm(list=ls())
=======
evdata$X2rim3ry12 <- as.factor(evdata$X2rim3ry12)
#Making some Data Labels
#Note: Assuming they have the same meanings as the May 28 Codebook Values -- Double check with Matt
evdata$G1n12 <- factor(evdata$G1n12,levels=c(1,2,3,4,"Y"),labels=c("early","at polls","mail","no vote","missing"))
#Making some Data Labels
evdata28$G1n12 <- factor(evdata28$G1n12,levels=c(0,1,2,3,4),labels=c("missing","early","at polls","mail","no vote"))
evdata28$Race <- factor(evdata28$Race,levels=c(0,1,2,3,4,5),labels=c("White","African American","Asian","Hispanic","Native American","Other"))
evdata28$Sex <- factor(evdata28$Sex,labels=c("Male","Female"))
evdata28$Party <- factor(evdata28$Party,labels=c("Dem","Repub","Other"))
comdata<-merge(evdata,evdata28,by="matchbacki")
#Testing that merged variables agree
testa<-which(comdata$Sex.x=="F")
testb<-which(comdata$Sex.y=="Female")
identical(testa,testb)
testc<-which(comdata$Sex.x=="M")
testd<-which(comdata$Sex.y=="Male")
identical(testc,testd)
#Removing redundant variables
names(comdata)
comdata$Sex<-comdata$Sex.x
comdata$Sex.x<-NULL
comdata$Sex.y<-NULL
comdata$Party<-comdata$Party.x
comdata$Party.x<-NULL
comdata$Party.y<-NULL
comdata$Race<-comdata$Race.x
comdata$Race.x<-NULL
comdata$Race.y<-NULL
comdata$G1n12<-comdata$G1n12.x
comdata$G1n12.x<-NULL
comdata$G1n12.y<-NULL
comdata$X2rim3ry12<-NULL
names(comdata)
View(comdata)
#Making Distance Variables Clear
comdata$Miles.PL<-comdata$Miles
comdata$Miles<-NULL
comdata$Miles.EV<-round(comdata$Feet/5280,2)
comdata$Feet<-NULL
View(comdata)
comdata$Dif.PL.EV<-comdata$Miles.PL-comdata$Miles.EV
View(comdata)
#Creating some new variables
comdata$early_gen <- 0 #gen standds for generated, so we can keep track. Also avoids confusion with factor label "early"
comdata$early_gen <- ifelse(comdata$G1n12=="early",1,0)
comdata$early_gen <- factor(comdata$early_gen,labels=c("other","early"))
comdata$polls_gen <- 0
comdata$polls_gen <- ifelse(comdata$G1n12=="at polls",1,0)
comdata$polls_gen <- factor(comdata$polls_gen,labels=c("other","at polls"))
cor(comdata$Miles.PL,as.numeric(comdata$early_gen))
cor(comdata$Miles.EV,as.numeric(comdata$early_gen))
mnew<-glm(early_gen~Dif.PL.EV,data=subset(comdata,G1n12!="no vote" & G1n12!="mail"& G1n12!="missing"),family=binomial)
summary(mnew)
mnew2<-glm(early_gen~Dif.PL.EV+Miles.PL,data=subset(comdata,G1n12!="no vote" & G1n12!="mail"& G1n12!="missing"),family=binomial)
summary(mnew2)
load("C:/Users/Mark/Dropbox/Shared with Mark/Combine_Distances.R")
evdata  <-  read.csv("C:/Users/Mark/Dropbox/Shared with Mark/earlyvotesites.csv")
evdata28 <- read.csv("C:/Users/Mark/Dropbox/Shared with Mark/pollingmay28.csv")
#Making sure data types are correctly assigned
evdata28$Sex <- as.factor(evdata28$Sex) #Note: 578 unassigned values
evdata28$Race <- as.factor(evdata28$Race)
evdata28$G1n12 <- as.factor(evdata28$G1n12)
evdata28$Party <- as.factor(evdata28$Party)
evdata28$Prim3ry12 <- as.factor(evdata28$Prim3ry12)
#Making sure data types are correctly assigned
evdata$Sex <- as.factor(evdata$Sex)
evdata$Race <- as.factor(evdata$Race)
evdata$G1n12 <- as.factor(evdata$G1n12)
evdata$Party <- as.factor(evdata$Party)
evdata$X2rim3ry12 <- as.factor(evdata$X2rim3ry12)
#Making some Data Labels
#Note: Assuming they have the same meanings as the May 28 Codebook Values -- Double check with Matt
evdata$G1n12 <- factor(evdata$G1n12,levels=c(1,2,3,4,"Y"),labels=c("early","at polls","mail","no vote","missing"))
#Making some Data Labels
evdata28$G1n12 <- factor(evdata28$G1n12,levels=c(0,1,2,3,4),labels=c("missing","early","at polls","mail","no vote"))
evdata28$Race <- factor(evdata28$Race,levels=c(0,1,2,3,4,5),labels=c("White","African American","Asian","Hispanic","Native American","Other"))
evdata28$Sex <- factor(evdata28$Sex,labels=c("Male","Female"))
evdata28$Party <- factor(evdata28$Party,labels=c("Dem","Repub","Other"))
comdata<-merge(evdata,evdata28,by="matchbacki")
#Testing that merged variables agree
testa<-which(comdata$Sex.x=="F")
testb<-which(comdata$Sex.y=="Female")
identical(testa,testb)
testc<-which(comdata$Sex.x=="M")
testd<-which(comdata$Sex.y=="Male")
identical(testc,testd)
#Removing redundant variables
names(comdata)
comdata$Sex<-comdata$Sex.x
comdata$Sex.x<-NULL
comdata$Sex.y<-NULL
comdata$Party<-comdata$Party.x
comdata$Party.x<-NULL
comdata$Party.y<-NULL
comdata$Race<-comdata$Race.x
comdata$Race.x<-NULL
comdata$Race.y<-NULL
comdata$G1n12<-comdata$G1n12.x
comdata$G1n12.x<-NULL
comdata$G1n12.y<-NULL
comdata$X2rim3ry12<-NULL
names(comdata)
#Making Distance Variables Clear
comdata$Miles.PL<-comdata$Miles
comdata$Miles<-NULL
comdata$Miles.EV<-round(comdata$Feet/5280,2)
comdata$Feet<-NULL
#Creating new Distance Variable
#Difference between PL and Early Vote Site
comdata$Dif.PL.EV<-comdata$Miles.PL-comdata$Miles.EV
#Note: so if this variable is postive, the election date site is
#farther away than the early vote site.
#In general, election date sites are closer than early voting sites
mean(comdata$Dif.PL.EV) #mean is negative
#Creating some new variables
comdata$early_gen <- 0 #gen standds for generated, so we can keep track. Also avoids confusion with factor label "early"
comdata$early_gen <- ifelse(comdata$G1n12=="early",1,0)
comdata$early_gen <- factor(comdata$early_gen,labels=c("other","early"))
comdata$polls_gen <- 0
comdata$polls_gen <- ifelse(comdata$G1n12=="at polls",1,0)
comdata$polls_gen <- factor(comdata$polls_gen,labels=c("other","at polls"))
rm('testa','testb')
rm('testc','testd')
save.image("C:/Users/Mark/Dropbox/Shared with Mark/ComData.RData")
View(comdata)
View(comdata)
comdata$DISTANCE<-NULL
View(comdata)
comdata$PrecinctNA<-NULL
View(comdata)
comdata$PrecinctNa<-NULL
View(comdata)
save.image("C:/Users/Mark/Dropbox/Shared with Mark/ComData.RData")
load("C:/Users/Mark/Dropbox/Shared with Mark/ComData.RData")
summary(comdata$G1n12)
load("C:/Users/Mark/Dropbox/Shared with Mark/ComData.RData")
#These Models are run under the philosophy of 'Part 2' of the policy memo
m1<-glm(early_gen~Miles.EV,data=subset(comdata,G1n12!="at polls" & G1n12!="mail" & G1n12!="missing"),family=binomial)
m2<-glm(polls_gen~Miles.PL,data=subset(comdata,G1n12!="early" & G1n12!="mail" & G1n12!="missing"),family=binomial)
m3<-glm(early_gen~Miles.PL+Dif.PL.EV,data=subset(comdata,G1n12!="no vote" & G1n12!="mail" & G1n12!="missing"),family=binomial)
summary(m1)
summary(m2)
summary(m3)
m1$coef
m1.coef<-m1$coef[2]
m1.coef<-m1$coef[2]
exp(m1.coef)
x<-seq(0,5,length.out=1000)
exp(-.148)
m1.OR<-exp(m1.coef)
test.OR<-.863
x<-seq(0,5,length.out=1000)
y<-exp(x*test.OR)
plot(x,y)
plot(comdata$Miles,m1$fitted,col="red",type="l")
dim(m1$fitted)
length(m1$fitted)
length(comdata$Miles)
length(comdata$Miles.EV)
ind <- which(comdata$G1n12!="at polls")
ind <- which(comdata$G1n12!="at polls" & comdata$G1n12!="mail" & comdata$G1n12!="missing")
plot(comdata$Miles.EV[ind],m1$fitted,col="red",type="l")
summary(m1)
summary(m1)
testm <- glm(polls_gen~Miles.PL,data=subset(comdata,G1n12!="no vote" & G1n12!="mail"& G1n12!="missing"),family=binomial)
summary(testm)
testind<-which(G1n12!="no vote" & comdata$G1n12!="mail" & comdata$G1n12!="missing")
testind<-which(comdata$G1n12!="no vote" & comdata$G1n12!="mail" & comdata$G1n12!="missing")
length(testind)
plot(comdata$Miles.PL[ind],testm$fitted,col="red",type="l")
length(testm$fitted)
plot(comdata$Miles.PL[testind],testm$fitted,col="red",type="l")
?predict.glm
summary(m1)
summary(m2)
summary(m3)
?merge
summary(m2)
m2.gam<-gam(polls_gen~s(Miles.PL),data=subset(comdata,G1n12!="early" & G1n12!="mail" & G1n12!="missing"),family=binomial)
library(gam)
m2.gam<-gam(polls_gen~s(Miles.PL),data=subset(comdata,G1n12!="early" & G1n12!="mail" & G1n12!="missing"),family=binomial)
plot(m2.gam)
summary(m2.gam)
View(comdata)
install.packages("car")
library(car)
plot(comdata$Miles.PL,polls.gen)
plot(comdata$Miles.PL,comdata$polls.gen)
plot(comdata$Miles.PL,comdata$polls_gen)
m1.gam<-gam(early_gen~s(Miles.EV),data=subset(comdata,G1n12!="at polls" & G1n12!="mail" & G1n12!="missing"),family=binomial)
plot(m1.gam)
summary(m1)
m3.gam<-gam(early_gen~Miles.PL+s(Dif.PL.EV),data=subset(comdata,G1n12!="no vote" & G1n12!="mail" & G1n12!="missing"),family=binomial)
plot(m3.gam)
summary(m3.gam)
m3.gam<-gam(early_gen~s(Miles.PL)+Dif.PL.EV,data=subset(comdata,G1n12!="no vote" & G1n12!="mail" & G1n12!="missing"),family=binomial)
plot(m3.gam)
summary(m2)
plot(m2.gam)
View(comdata)
load("C:/Users/Mark/Dropbox/Research/GoF Test/June18-UpdateMay20.RData")
liResults
ks.test
install.packages(“devtools”)
install.packages("devtools”)
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(changepoint)
library(changepoints)
library(cpm)
install.packages("changepoint")
library(changepoint)
?changepoint
changepoint::news
cpt.mean
methods(cpt.mean)
method(cpt.mean)
?system.time
?%.%
?%in%
?with
?assign
load("C:/Users/Mark/AppData/Local/Temp/KFM2.RData")
KFM2
library(reshape)
install.packages("reshape")
data(smiths)
data(smith)
library(reshape)
data(smiths)
smiths
melt(smiths)
melt(smiths,id=c("subject","time"))
?melt
melt(smiths,id=1:2
)
trial <- data.frame(id = factor(1:4), A1 = c(1, 2, 1, 2), A2 = c(2,                                                              + 1, 2, 1), B1 = c(3, 3, 3, 3))
trial
trialm <- melt(trial)
trialm
install.packages("knitr")
library(knitr)
install.packages("ggplot2")
install.packages("devtools")
library(devtools)
find_rtools()
library(devtools)
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
shinyapps::setAccountInfo(name='morndorff', token='0860123ED911EEDB90A75E15EC11D097', secret='f+Gif2ZTLvggluo07bL1h1AlH4IRM0MPEOaEbVLs')
---
shinyapps::setAccountInfo(name='morndorff', token='AC11973554AEB14CB87E645947F3E646', secret='U7aGDs/D/r2VccZjZX90qPDpCEVJjCwivDmVrSJk')
deployApp()
library(shiny)
?renderPlot
library(devtools)
install.packages("shiny")
library(shiny)
library(knitr)
install.packages("animation")
library(animation)
?animation
`Data630` <- read.csv("C:/Users/Mark/Dropbox/Shared with Mark/Organizer Research Data/6-30-14 Data File.csv")
Data630 <- Data630[-1, ]
rm(list=ls())
data(diamonds)
library(ggplot2)
data(diamonds)
head(diamonds)
dsmall <- diamonds[sample(nrow(diamonds), 100), ]
qplot(carat, price, data=diamonds)
qplot(log(carat), price, data=diamonds)
qplot(carat, log(price), data=diamonds)
qplot(log(carat), log(price), data=diamonds)
qplot(carat, x*y*z, data=diamonds)
qplot(carat, price, data = dsmall, colour = color)
qplot(carat, price, data = dsmall, shape = cut)
qplot(carat, price, data = diamonds, alpha = I(1/10))
qplot(carat, price, data = diamonds, alpha = I(1/100))
qplot(carat, price, data = diamonds, alpha = I(1/200))
qplot(carat, price, data=diamonds, geom=smoothing)
qplot(carat, price, data=diamonds, geom="smooth")
qplot(carat, data=diamond)
qplot(carat, data=diamonds)
qplot(carat, data=diamonds, geom="polygon")
qplot(carat, data=diamonds, geom="freqpoly")
qplot(carat, data=diamonds, geom="density")
qplot(carat, price, data=diamonds, geom=c("point","smooth"))
qplot(carat, price, data=diamonds, geom=c("point","smooth"), span=.2)
qplot(carat, price, data=diamonds, geom=c("point","smooth"), span=1)
qplot(carat, price, data=diamonds, geom=c("point","smooth"), method="loess", span=.2)
rm(list=ls())
setwd("C:/Users/Mark/Dropbox/Research/GoF Test")
source("functions.R")
set.seed(5)
x <- rnorm(100)
myts.par(x, qt, 3)
>>>>>>> 671050497e3656b76ad3f4c62a19622e46a9964e
source("functions.R")
library(waveslim)
set.seed(5)
# Finding ARLs for energy.curve method
UCL <- c(.01,.02, length.out=10)
ARL_Curve_SA <- ARL_Proc(UCL=UCL, time=1,
method=Find_IC_RL_Fast,
tstat=wave.den,
dist="norm",
params=list(mean=0, sd=1))
rm(list=ls())
source("functions.R")
library(waveslim)
set.seed(5)
# Finding ARLs for energy.curve method
UCL <- c(.01,.02, length.out=10)
ARL_Curve_SA <- ARL_Proc(UCL=UCL, time=0,
method=Find_IC_RL_Fast,
tstat=wave.den,
dist="norm",
params=list(mean=0, sd=1))
rm(list=ls())
source("functions.R")
<<<<<<< HEAD
library(waveslim)
set.seed(5)
# Finding ARLs for energy.curve method
UCL <- c(.01,.02, length.out=10)
ARL_Curve_SA <- ARL_Proc(UCL=UCL, time=.1,
method=Find_IC_RL_Fast,
tstat=wave.den,
dist="norm",
params=list(mean=0, sd=1))
rm(list=ls())
source("functions.R")
library(waveslim)
set.seed(5)
# Finding ARLs for energy.curve method
UCL <- c(.01,.02, length.out=10)
ARL_Curve_SA <- ARL_Proc(UCL=UCL, time=.1,
method=Find_IC_RL_Fast,
tstat=wave.den,
dist="norm",
params=list(mean=0, sd=1))
Find_IC_RL_Fast(num.samp=30, dist="norm", params=list(mean=0, sd=2), tstat=wave.energy, UCL=c(.01,.02))
rm(list=ls())
source("functions.R")
library(waveslim)
set.seed(5)
# Finding ARLs for energy.curve method
UCL <- seq(.01,.02, length.out=10)
ARL_Curve_SA <- ARL_Proc(UCL=UCL, time=.1,
method=Find_IC_RL_Fast,
tstat=wave.den,
dist="norm",
params=list(mean=0, sd=1))
rm(list=ls())
source("functions.R")
library(waveslim)
set.seed(5)
# Finding ARLs for energy.curve method
UCL <- seq(.01,.02, length.out=10)
ARL_Curve_SA <- ARL_Proc(UCL=UCL, time=4,
method=Find_IC_RL_Fast,
tstat=wave.den,
dist="norm",
params=list(mean=0, sd=1))
rm(list=ls())
source("functions.R")
library(waveslim)
set.seed(5)
# Finding ARLs for energy.curve method
UCL <- seq(.01,.06, length.out=10)
ARL_Curve_SA <- ARL_Proc(UCL=UCL, time=15,
method=Find_IC_RL_Fast,
tstat=wave.den,
dist="norm",
params=list(mean=0, sd=1))
rm(list=ls())
source("functions.R")
library(waveslim)
set.seed(5)
# Finding ARLs for energy.curve method
UCL <- seq(.01,.1, length.out=10)
ARL_Curve_SA <- ARL_Proc(UCL=UCL, time=15,
method=Find_IC_RL_Fast,
tstat=wave.den,
dist="norm",
params=list(mean=0, sd=1))
rm(list=ls())
source("functions.R")
library(waveslim)
set.seed(5)
# Finding ARLs for energy.curve method
UCL <- seq(.05,.6, length.out=10)
ARL_Curve_SA <- ARL_Proc(UCL=UCL, time=15,
method=Find_IC_RL_Fast,
tstat=wave.den,
dist="norm",
params=list(mean=0, sd=1))
# SPS Testing, Take 7
rm(list=ls())
source("functions.R")
library(waveslim)
set.seed(5)
# Finding ARLs for energy.curve method
UCL <- seq(.05,.3, length.out=10)
ARL_Curve_SA <- ARL_Proc(UCL=UCL, time=15,
method=Find_IC_RL_Fast,
tstat=wave.den,
dist="norm",
params=list(mean=0, sd=1))
rm(list=ls())
source("functions.R")
library(waveslim)
set.seed(5)
# Finding ARLs for energy.curve method
UCL <- seq(.05,.4, length.out=10)
ARL_Curve_SA <- ARL_Proc(UCL=UCL, time=60,
method=Find_IC_RL_Fast,
tstat=wave.den,
dist="norm",
params=list(mean=0, sd=1))
str(ARL_Curve_SA)
ARL_Curve_SA[1]
UCL <- seq(.05,.4, length.out=10)
ARL_Curve_B <- ARL_Proc(UCL=UCL, time=60,
method=Find_IC_RL_Fast,
tstat=wave.den,
dist="norm",
params=list(mean=0, sd=1),
weight=TRUE)
ARL_Curve_B_Mat <- ARL_Curve_SA[[1]] # Biased ARL
ARL_Curve_B_Mat
ARL_Curve_B_Mat <- ARL_Curve_B[[1]] # Biased ARL
ARL_Curve_B_Mat
UCL <- seq(.05,.6, length.out=10)
ARL_Curve_B <- ARL_Proc(UCL=UCL, time=60,
method=Find_IC_RL_Fast,
tstat=wave.den,
dist="norm",
params=list(mean=0, sd=1),
weight=TRUE)
ARL_Curve_B_Mat <- ARL_Curve_B[[1]] # Biased ARL
UCL <- seq(.05,1, length.out=10)
ARL_Curve_B <- ARL_Proc(UCL=UCL, time=60,
method=Find_IC_RL_Fast,
tstat=wave.den,
dist="norm",
params=list(mean=0, sd=1),
weight=TRUE)
ARL_Curve_B_Mat <- ARL_Curve_B[[1]] # Biased ARL
colnames(ARL_Curve_B_Mat)
y <- ARL_Curve_SA_Mat[1,]
lm(y~UCL)
ARL_Curve_SA_Mat <- ARL_Curve_SA[[1]] # Sample Average ARL
y <- ARL_Curve_SA_Mat[1,]
lm(y~UCL)
?predict
lm_SA <- lm(y~UCL)
predict(lm_SA,data=200)
predict(lm_SA,newdata=200)
predict(object=lm_SA,newdata=data.frame(200))
predict(object=lm_SA,newdata=data.frame(x = 200))
lm_SA <- lm(y~UCL)
predict(object=lm_SA,newdata=data.frame(x = 200))
y
UCL
as.numeric(y)
y <- as.numeric(ARL_Curve_SA_Mat[1,])
lm_SA <- lm(y~UCL)
predict(object=lm_SA,newdata=data.frame(x = 200))
UCL
y
data.frame(x = 200)
lm(y~UCL)
seq(-3,3,.5)
length(seq(-3,3,.5)
)
y <- as.numeric(ARL_Curve_SA_Mat[1,])
lm_SA <- lm(y~UCL)
predict(lm_SA,data.frame(x = 200))
y <- as.numeric(ARL_Curve_SA_Mat[1,])
lm_SA <- lm(UCL~y)
predict(lm_SA,data.frame(y = 200))
ARL <- as.numeric(ARL_Curve_SA_Mat[1,])
lm_SA <- lm(UCL~ARL)
predict(lm_SA,data.frame(ARL = 200))
plot(lm_SA)
ARL <- as.numeric(ARL_Curve_SA_Mat[1,])
lm_SA <- lm(log(UCL)~ARL)
predict(lm_SA,data.frame(ARL = 200))
plot(lm_SA)
lm_SA <- lm(exp(UCL)~ARL)
predict(lm_SA,data.frame(ARL = 200))
plot(lm_SA)
?gam
??gam
library(gam)
install.packages("gam")
install.packages("gam")
?gam
library(gam)
?gam
gam_SA <- gam(UCL~ARL)
predict(gam_SA, data.frame(ARL=200))
plot(gam_SA)
?gam
gam_SA <- gam(UCL~s(ARL))
predict(gam_SA, data.frame(ARL=200))
plot(gam_SA)
ARL_Curve_SA_Mat
ARL
?predict.gam
predict(gam_SA, data.frame(ARL=200))
predict(gam_SA)
plot(gam_SA)
summary(gam_SA)
gam_SA <- gam(UCL~s(ARL))
predict(gam_SA, newdata=data.frame(ARL=200))
plot(gam_SA)
predict(gam_SA, newdata=data.frame(ARL=100))
plot(ARL,UCL)
plot(ARL,log(UCL))
plot(ARL,exp(UCL))
plot(ARL,UCL^2)
plot(ARL,UCL^3)
f <- approxfun(ARL,UCL)
f(200)
ARL_Curve_B_Mat <- ARL_Curve_B[[1]] # Biased ARL
ARL <- as.numeric(ARL_Curve_B_Mat[1,])
f <- approxfun(ARL,UCL)
ARL_B_200 <- f(200)
ARL_B_200
ARL_Curve_B_Mat <- ARL_Curve_B[[1]] # Biased ARL
ARL <- as.numeric(ARL_Curve_B_Mat[1,])
f <- approxfun(ARL,UCL)
UCL_B_200 <- f(200)
ARL_Curve_SA_Mat <- ARL_Curve_SA[[1]] # Sample Average ARL
ARL <- as.numeric(ARL_Curve_SA_Mat[1,])
f <- approxfun(ARL,UCL)
UCL_SA_200 <- f(200)
UCL_SA_200
UCL_B_200
test <- Find_IC_RL_Fast(num.samp=30, dist="norm",
params=list(mean=0, sd=1),
tstat=wave.energy,
UCL=UCL_SA_200,
detail=TRUE, weight=FALSE)
UCL_SA_200
ARL <- as.numeric(ARL_Curve_SA_Mat[1,])
f <- approxfun(ARL,UCL)
UCL_SA_200 <- f(200)
ARL
plot(f)
f(200)
ARL
UCL
UCL <- seq(.05,.4, length.out=10)
f <- approxfun(ARL,UCL)
UCL_SA_200 <- f(200)
UCL_SA_200
test <- Find_IC_RL_Fast(num.samp=30, dist="norm",
params=list(mean=0, sd=1),
tstat=wave.energy,
UCL=UCL_SA_200,
detail=TRUE, weight=FALSE)
test <- Find_IC_RL_Fast(num.samp=30, dist="norm",
params=list(mean=0, sd=1),
tstat=wave.den,
UCL=UCL_SA_200,
detail=TRUE, weight=FALSE)
rm(list=ls())
source("functions.R")
library(waveslim)
set.seed(5)
# Finding ARLs for energy.curve method
UCL <- seq(.05,.4, length.out=10)
ARL_Curve_SA <- ARL_Proc(UCL=UCL, time=60,
method=Find_IC_RL_Fast,
tstat=wave.energy,
dist="norm",
params=list(mean=0, sd=1))
rm(list=ls())
source("functions.R")
library(waveslim)
set.seed(5)
# Finding ARLs for energy.curve method
UCL <- seq(.05,.1, length.out=10)
ARL_Curve_SA <- ARL_Proc(UCL=UCL, time=1,
method=Find_IC_RL_Fast,
tstat=wave.energy,
dist="norm",
params=list(mean=0, sd=1))
rm(list=ls())
source("functions.R")
library(waveslim)
set.seed(5)
# Finding ARLs for energy.curve method
UCL <- seq(.01,.05, length.out=10)
ARL_Curve_SA <- ARL_Proc(UCL=UCL, time=1,
method=Find_IC_RL_Fast,
tstat=wave.energy,
dist="norm",
params=list(mean=0, sd=1))
ARL_Curve_SA_Mat <- ARL_Curve_SA[[1]] # Sample Average ARL
ARL <- as.numeric(ARL_Curve_SA_Mat[1,])
f <- approxfun(ARL,UCL)
UCL_SA_200 <- f(200)
rm(list=ls())
source("functions.R")
library(waveslim)
set.seed(5)
# Finding ARLs for energy.curve method
UCL <- seq(.01,.07, length.out=10)
ARL_Curve_SA <- ARL_Proc(UCL=UCL, time=60,
method=Find_IC_RL_Fast,
tstat=wave.energy,
dist="norm",
params=list(mean=0, sd=1))
ARL_Curve_SA_Mat <- ARL_Curve_SA[[1]] # Sample Average ARL
ARL <- as.numeric(ARL_Curve_SA_Mat[1,])
f <- approxfun(ARL,UCL)
UCL_SA_200 <- f(200)
test <- Find_IC_RL_Fast(num.samp=30, dist="norm",
params=list(mean=0, sd=1),
tstat=wave.energy,
UCL=UCL_SA_200,
detail=TRUE, weight=FALSE)
test
test <- Find_IC_RL_Fast(num.samp=30, dist="norm",
params=list(mean=0, sd=2),
tstat=wave.energy,
UCL=UCL_SA_200,
detail=TRUE, weight=FALSE)
test
test <- Find_IC_RL_Fast(num.samp=30, dist="norm",
params=list(mean=5, sd=2),
tstat=wave.energy,
UCL=UCL_SA_200,
detail=TRUE, weight=FALSE)
plot(test[[1]])
test <- Find_IC_RL_Fast(num.samp=30, dist="norm",
params=list(mean=5, sd=2),
tstat=wave.energy,
UCL=UCL_SA_200,
detail=TRUE, weight=FALSE)
Plots(test, weight="Average")
Plots <- function (test, weight="Biased") {
plot(test[[1]], main=paste("Plot of Test Statistic h(t), Weight=",weight), type="l") # Weight = Biased Towards Extreme Obs?
hist(test[[7]], main="Tau Chosen (Raw)") # Which Tau is Chosen?
hist(test[[8]], main="Tau Chosen (Chosen/Time)") # Tau Chosen Divided by Time (Scaled 0-1)
d <- density(test[[8]], adjust=.5)
plot(d, , "gaussian", xlim=c(0,1), main="Tau/T Chosen at Each Step") #Kernel Density Estimate
quantile(test[[8]], probs=seq(0,1,.1)) # Quantiles of Tau/T
}
Plots(test, weight="Average")
test <- Find_IC_RL_Fast(num.samp=30, dist="norm",
params=list(mean=30, sd=2),
tstat=wave.energy,
UCL=UCL_SA_200,
detail=TRUE, weight=FALSE)
Plots(test, weight="Average")
test <- Find_IC_RL_Fast(num.samp=30, dist="norm",
params=list(mean=30, sd=2),
tstat=wave.energy,
UCL=UCL_SA_200,
detail=TRUE, weight=FALSE)
Plots(test, weight="Average")
test <- Find_IC_RL_Fast(num.samp=30, dist="norm",
params=list(mean=30, sd=2),
tstat=wave.energy,
UCL=UCL_SA_200,
detail=TRUE, weight=FALSE)
Plots(test, weight="Average")
test <- Find_IC_RL_Fast(num.samp=30, dist="norm",
params=list(mean=30, sd=2),
tstat=wave.energy,
UCL=UCL_SA_200,
detail=TRUE, weight=FALSE)
Plots(test, weight="Average")
test <- Find_IC_RL_Fast(num.samp=30, dist="norm",
params=list(mean=30, sd=2),
tstat=wave.energy,
UCL=UCL_SA_200,
detail=TRUE, weight=FALSE)
Plots(test, weight="Average")
test <- Find_IC_RL_Fast(num.samp=30, dist="norm",
params=list(mean=30, sd=2),
tstat=wave.energy,
UCL=UCL_SA_200,
detail=TRUE, weight=FALSE)
Plots(test, weight="Average")
test <- Find_IC_RL_Fast(num.samp=30, dist="norm",
params=list(mean=30, sd=2),
tstat=wave.energy,
UCL=UCL_SA_200,
detail=TRUE, weight=FALSE)
Plots(test, weight="Average")
?hist
Plots <- function (test, weight="Biased") {
plot(test[[1]], main=paste("Plot of Test Statistic h(t), Weight=",weight), type="l") # Weight = Biased Towards Extreme Obs?
hist(test[[7]], main="Tau Chosen (Raw)") # Which Tau is Chosen?
hist(test[[8]], main="Tau Chosen (Chosen/Time)", bin=20) # Tau Chosen Divided by Time (Scaled 0-1)
d <- density(test[[8]], adjust=.5)
plot(d, , "gaussian", xlim=c(0,1), main="Tau/T Chosen at Each Step") #Kernel Density Estimate
quantile(test[[8]], probs=seq(0,1,.1)) # Quantiles of Tau/T
}
Plots(test, weight="Average")
Plots <- function (test, weight="Biased") {
plot(test[[1]], main=paste("Plot of Test Statistic h(t), Weight=",weight), type="l") # Weight = Biased Towards Extreme Obs?
hist(test[[7]], main="Tau Chosen (Raw)") # Which Tau is Chosen?
hist(test[[8]], main="Tau Chosen (Chosen/Time)", breaks=20) # Tau Chosen Divided by Time (Scaled 0-1)
d <- density(test[[8]], adjust=.5)
plot(d, , "gaussian", xlim=c(0,1), main="Tau/T Chosen at Each Step") #Kernel Density Estimate
quantile(test[[8]], probs=seq(0,1,.1)) # Quantiles of Tau/T
}
Plots(test, weight="Average")
Plots <- function (test, weight="Biased") {
plot(test[[1]], main=paste("Plot of Test Statistic h(t), Weight=",weight), type="l") # Weight = Biased Towards Extreme Obs?
hist(test[[7]], main="Tau Chosen (Raw)") # Which Tau is Chosen?
hist(test[[8]], main="Tau Chosen (Chosen/Time)", breaks=20) # Tau Chosen Divided by Time (Scaled 0-1)
d <- density(test[[8]], adjust=.5)
plot(d, , "gaussian", xlim=c(0,1), main="Tau/T Chosen at Each Step") #Kernel Density Estimate
quantile(test[[8]], probs=seq(0,1,.1)) # Quantiles of Tau/T
}
=======
myts.par(x, qt, 3, do.plot=TRUE)
setwd("C:/Users/Mark/Dropbox/R Stuff")
rm(list=ls())
source("functions.R")
set.seed(5)
x <- rnorm(100,sqrt(3))
y <- rt(100,3)
perm.test(x,y,f=Max_Quan_TS)
rm(list=ls())
source("functions.R")
set.seed(5)
x <- rnorm(100,0,sqrt(3))
y <- rt(100,3)
perm.test(x,y,f=Max_Quan_TS)
x <- rnorm(100,0,sqrt(3))
y <- rt(100,3)
perm.test(x,y,f=Max_Quan_TS)
Max_Quan_TS(x,y,do.plot=TRUE)
perm.test(x,y,f=Max_Quan_TS, doplot=TRUE)
rm(list=ls())
source("functions.R")
set.seed(6)
x <- rnorm(100,0,sqrt(3))
y <- rt(100,3)
perm.test(x,y,f=Max_Quan_TS, doplot=TRUE)
Max_Quan_TS(x,y,do.plot=TRUE)
rm(list=ls())
source("functions.R")
set.seed(7)
x <- rnorm(100,0,sqrt(3))
y <- rt(100,3)
perm.test(x,y,f=Max_Quan_TS, doplot=TRUE)
Max_Quan_TS(x,y,do.plot=TRUE)
rm(list=ls())
source("functions.R")
set.seed(8)
x <- rnorm(100,0,sqrt(3))
y <- rt(100,3)
perm.test(x,y,f=Max_Quan_TS, doplot=TRUE)
Max_Quan_TS(x,y,do.plot=TRUE)
rm(list=ls())
source("functions.R")
set.seed(9)
x <- rnorm(100,0,sqrt(3))
y <- rt(100,3)
perm.test(x,y,f=Max_Quan_TS, doplot=TRUE)
Max_Quan_TS(x,y,do.plot=TRUE)
rm(list=ls())
source("functions.R")
set.seed(10)
x <- rnorm(100,0,sqrt(3))
y <- rt(100,3)
perm.test(x,y,f=Max_Quan_TS, doplot=TRUE)
Max_Quan_TS(x,y,do.plot=TRUE)
rm(list=ls())
source("functions.R")
set.seed(11)
x <- rnorm(100,0,sqrt(3))
y <- rt(100,3)
perm.test(x,y,f=Max_Quan_TS, doplot=TRUE)
Max_Quan_TS(x,y,do.plot=TRUE)
rm(list=ls())
source("functions.R")
set.seed(5)
wave.den(x,y)
x <- rnorm(50)
y <- rnorm(50)
wave.den(x,y)
rm(list=ls())
library(waveslim)
source("functions.R")
set.seed(5)
x <- rnorm(50)
y <- rnorm(50)
wave.den(x,y)
wave.den(x,y, doplot=TRUE)
?RANGE
?range
source("functions.R")
wave.den(x,y, doplot=TRUE)
source("functions.R")
source("functions.R")
wave.den(x,y, doplot=TRUE)
wave.den(x,y, doplot=TRUE)
setwd("C:/Users/Mark/Dropbox/Research/GoF Test/Figures/Wave Max Energy")
wave.den(x,y, doplot=TRUE)
rm(list=ls())
library(waveslim)
source("functions.R")
set.seed(5)
x <- rnorm(50)
y <- rnorm(50)
wave.den(x,y, doplot=TRUE)
rm(list=ls())
library(waveslim)
source("functions.R")
set.seed(5)
x <- rnorm(50)
y <- rnorm(50)
jpeg('Max_Coef.jpeg')
wave.den(x,y, doplot=TRUE)
dev.off()
?abline
x <- rnorm(50)
y <- runif(49)
wave.den(x,y, doplot=TRUE)
# Generating Figures for Wavelet Method: Largest coefficient
rm(list=ls())
library(waveslim)
source("functions.R")
set.seed(5)
x <- rnorm(50)
y <- rnorm(50)
jpeg('Max_Coef_NvN.jpeg')
wave.den(x,y, doplot=TRUE)
dev.off()
x <- rnorm(50)
y <- runif(50)
jpeg('Max_Coef_NvU.jpeg')
wave.den(x,y, doplot=TRUE)
dev.off()
Max_Quan_TS(x,y, do.plot=TRUE)
title("test")
wave.den(x,y, doplot=TRUE)
title("test")
wave.den(x,y, doplot=TRUE)
title("test")
rm(list=ls())
library(waveslim)
source("functions.R")
set.seed(5)
x <- rnorm(50)
y <- rnorm(50)
jpeg('Curve_NvN')
wave.energy(x,y, doplot=TRUE)
dev.off()
x <- rnorm(50)
y <- runif(50)
jpeg('Curve_NvU')
wave.energy(x,y, doplot=TRUE)
dev.off()
rm(list=ls())
setwd("C:/Users/Mark/Dropbox/Research/GoF Test/Figures/Wave Curve")
rm(list=ls())
library(waveslim)
source("functions.R")
set.seed(5)
x <- rnorm(50)
y <- rnorm(50)
jpeg('Curve_NvN.jpeg')
wave.energy(x,y, doplot=TRUE)
dev.off()
x <- rnorm(50)
y <- rnorm(50)
wave.energy(x,y, doplot=TRUE)
rm(list=ls())
library(waveslim)
source("functions.R")
set.seed(5)
x <- rnorm(50)
y <- rnorm(50)
jpeg('Curve_NvN.jpeg')
wave.energy(x,y, doplot=TRUE)
dev.off()
x <- rnorm(50)
y <- runif(50)
jpeg('Curve_NvU.jpeg')
wave.energy(x,y, doplot=TRUE)
dev.off()
rm(list=ls())
library(waveslim)
source("functions.R")
set.seed(5)
x <- rnorm(50)
y <- rnorm(50)
x <- rnorm(50)
y <- runif(50)
wave.energy(x,y, doplot=TRUE)
source("functions.R")
wave.energy(x,y, doplot=TRUE)
source("functions.R")
wave.energy(x,y, doplot=TRUE)
rm(list=ls())
library(waveslim)
source("functions.R")
set.seed(5)
x <- rnorm(50)
y <- rnorm(50)
jpeg('Curve_NvN.jpeg')
wave.energy(x,y, doplot=TRUE)
dev.off()
x <- rnorm(50)
y <- runif(50)
jpeg('Curve_NvU.jpeg')
wave.energy(x,y, doplot=TRUE)
dev.off()
setwd("C:/Users/Mark/Dropbox/Teaching/Teaching Fall 2014/Non Parametric Statistics")
Cau <- c(8.27, 8.20, 8.25, 8.14, 9.00, 8.10, 7.20, 8.32, 7.70)
NaAm <- c(8.50, 9.48, 8.65, 8.16, 8.83, 7.76, 8.63)
names(Cau) <- rep("Cau", length(Cau))
names(NaAm) <- rep("NaAm", length(NaAm))
Z <- sort(c(Cau,NaAm))
CauRankSum <- sum(which(names(Z)=="Cau"))
NaAmRankSum <- sum(which(names(Z)=="NaAm"))
write.csv(Z,file="Ranks.csv")
Z
1+2+4+5+7+8+9+10+15
>>>>>>> 671050497e3656b76ad3f4c62a19622e46a9964e
