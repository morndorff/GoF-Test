x
sort(test[1:10,3])
sort(test[1:10,4])
sort(x)
test <- rep(1000,sample(x,size=10))
?rep
?replicate
test <- replicate(1000,sample(x,size=10))
dim(test)
test <- replicate(1000,sample(x,size=10, replace=FALSE))
sort(test[1:10,4])
sort(test[1:10,3])
sort(test)
sort(test[1:10,4])
sort(test[1:10,3])
sort(x)
?apply
set.seed(5)
source("functions.R")
x <- rnorm(10); y <- rnorm(10);
perm.test(x,"qnorm",num.perm=10,  f=Max_Quan_TS)
perm.test(x,"qnorm", num.perm=10, fops=list(interp=3, do.plot=TRUE), f=Max_Quan_TS)
perm.test(x,y, num.perm=10, fops=list(interp=3, do.plot=TRUE), f=Max_Quan_TS)
perm.test(x,y, num.perm=10, fops=list(interp=3), f=Max_Quan_TS)
# Starting work on parallel processing
ptm <- proc.time()
perm.test2(x,y, num.perm=10000,f=Max_Quan_TS)
proc.time()-ptm
ptm <- proc.time()
perm.test(x,y, num.perm=10000,f=Max_Quan_TS)
proc.time()-ptm
set.seed(5)
source("functions.R")
x <- rnorm(10); y <- rnorm(10);
perm.test(x,"qnorm",num.perm=10,  f=Max_Quan_TS)
perm.test(x,"qnorm", num.perm=10, fops=list(interp=3, do.plot=TRUE), f=Max_Quan_TS)
perm.test(x,y, num.perm=10, fops=list(interp=3, do.plot=TRUE), f=Max_Quan_TS)
perm.test(x,y, num.perm=10, fops=list(interp=3), f=Max_Quan_TS)
# Starting work on parallel processing
ptm <- proc.time()
perm.test2(x,y, num.perm=10000,f=Max_Quan_TS)
proc.time()-ptm
ptm <- proc.time()
perm.test(x,y, num.perm=10000,f=Max_Quan_TS)
proc.time()-ptm
set.seed(5)
source("functions.R")
x <- rnorm(10); y <- rnorm(10);
perm.test(x,"qnorm",num.perm=10,  f=Max_Quan_TS)
perm.test(x,"qnorm", num.perm=10, fops=list(interp=3, do.plot=TRUE), f=Max_Quan_TS)
perm.test(x,y, num.perm=10, fops=list(interp=3, do.plot=TRUE), f=Max_Quan_TS)
perm.test(x,y, num.perm=10, fops=list(interp=3), f=Max_Quan_TS)
# Starting work on parallel processing
ptm <- proc.time()
perm.test2(x,y, num.perm=10000,f=Max_Quan_TS)
proc.time()-ptm
ptm <- proc.time()
perm.test(x,y, num.perm=10000,f=Max_Quan_TS)
proc.time()-ptm
set.seed(5)
source("functions.R")
x <- rnorm(10); y <- rnorm(10);
perm.test(x,"qnorm",num.perm=10,  f=Max_Quan_TS)
perm.test(x,"qnorm", num.perm=10, fops=list(interp=3, do.plot=TRUE), f=Max_Quan_TS)
perm.test(x,y, num.perm=10, fops=list(interp=3, do.plot=TRUE), f=Max_Quan_TS)
perm.test(x,y, num.perm=10, fops=list(interp=3), f=Max_Quan_TS)
# Starting work on parallel processing
ptm <- proc.time()
perm.test2(x,y, num.perm=10000,f=Max_Quan_TS)
proc.time()-ptm
ptm <- proc.time()
perm.test(x,y, num.perm=10000,f=Max_Quan_TS)
proc.time()-ptm
ptm <- proc.time()
perm.test2(x,y, num.perm=2000,f=Max_Quan_TS)
proc.time()-ptm
ptm <- proc.time()
perm.test(x,y, num.perm=2000,f=Max_Quan_TS)
proc.time()-ptm
?icount
test <- density(x)
cumsum(test)
str(test)
plot(test)
length(x)
cumsum(test$y)
cumsum(test$x)
cumsum(test$y)
cumsum(test$y)
plot(cumsum(test$y))
str(test)
plot(density)
x <- rnorm(15,5,1)
y <- rnorm(15,4,1)
aov(x,y)
?anova
?aov
block <- c(rep("X",15), rep("Y",15))
block
aov(c(x,y)~block)
t.test(x,y,pooled=TRUE)
atest <- aov(c(x,y)~block)
summary(atest)
?rmvnorm
?diag
diag(1)
diag(3)
mvrnorm(50,mu=1:50, sigma=diag(50))
library(MASS)
mvrnorm(50,mu=1:50, sigma=diag(50))
mvrnorm(50,mu=1:50, Sigma=diag(50))
?apply
datamat <- mvrnorm(30,mu=1:50, Sigma=diag(50))
dim(datamat)
datamat <- mvrnorm(30,mu=1:50, Sigma=diag(50))
sum_theta <- sum(mu^2)
apply(datamat,1,function(x) sum(x^2))
sum_theta
datamat <- mvrnorm(30,mu=1:50, Sigma=diag(50))
sum_theta <- sum(mu^2)
apply(datamat,1,function(x) sum(x^2))
datamat <- mvrnorm(30,mu=1:50, Sigma=diag(50))
mu <- 1:50
sum_theta <- sum(mu^2)
apply(datamat,1,function(x) sum(x^2))
sum_theta
p < 50
mu <- 1:50
datamat <- mvrnorm(30,mu=mu, Sigma=diag(50))
sum_theta <- sum(mu^2)
apply(datamat,1,function(x) sum(x^2))
mean(sum_theta)
p < 50
mu <- 1:50
datamat <- mvrnorm(30,mu=mu, Sigma=diag(50))
sum_theta <- sum(mu^2)
sum_x <- apply(datamat,1,function(x) sum(x^2))
mean(sum_x)
p < 50
mu <- 1:50
datamat <- mvrnorm(5000,mu=mu, Sigma=diag(50))
sum_theta <- sum(mu^2)
sum_x <- apply(datamat,1,function(x) sum(x^2))
mean(sum_x)
sum_theta-50
sum_theta
p < 50
mu <- 1:50
datamat <- mvrnorm(10000,mu=mu, Sigma=diag(50))
sum_theta <- sum(mu^2)
sum_x <- apply(datamat,1,function(x) sum(x^2))
mean(sum_x)
sum_theta-50
sum_theta
p < 50
mu <- 1:50
datamat <- mvrnorm(10000,mu=mu, Sigma=diag(50))
sum_theta <- sum(mu^2)
sum_x <- apply(datamat,1,function(x) sum(x^2))
mean(sum_x)-50
sum_theta
p < 50
mu <- 1:50
datamat <- mvrnorm(20000,mu=mu, Sigma=diag(50))
sum_theta <- sum(mu^2)
sum_x <- apply(datamat,1,function(x) sum(x^2))
mean(sum_x)-50
sum_theta
p < 50
mu <- 1:50
datamat <- mvrnorm(20000,mu=mu, Sigma=diag(50))
sum_theta <- sum(mu^2)
sum_x <- apply(datamat,1,function(x) sum(x^2))
mean(sum_x)-50
sum_theta
p < 50
mu <- 1:50
datamat <- mvrnorm(20000,mu=mu, Sigma=diag(50))
sum_theta <- sum(mu^2)
sum_x <- apply(datamat,1,function(x) sum(x^2))
mean(sum_x)-50
sum_theta
p < 50
mu <- 1:50
datamat <- mvrnorm(20000,mu=mu, Sigma=diag(50))
sum_theta <- sum(mu^2)
sum_x <- apply(datamat,1,function(x) sum(x^2))
mean(sum_x)-50
sum_theta
sd(1,2,5,3,2,5)
sd(c(1,2,5,3,2,5))
sd(1)
sd(1:3)
sd(1:4)
sd(1:10)
sd(1:1000)
source("functions.R")
ARL_Proc_Tol(method=Find_IC_RL_Fast)
source("functions.R")
ARL_Proc_Tol(method=Find_IC_RL_Fast, UCL=.08)
source("functions.R")
ARL_Proc_Tol(method=Find_IC_RL_Fast, UCL=.08)
source("functions.R")
ARL_Proc_Tol(method=Find_IC_RL_Fast, UCL=.2)
source("functions.R")
ARL_Proc_Tol(method=Find_IC_RL_Fast, UCL=.2)
source("functions.R")
ARL_Proc_Tol(method=Find_IC_RL_Fast, UCL=.2)
source("functions.R")
ARL_Proc_Tol(method=Find_IC_RL_Fast, UCL=.2)
sd(c(60,10,20,31,65,4,5))
sd(c(60,10,20,31,65,4,5))/sqrt(7)
sd(c(60,10,20,31,65,4,5))/sqrt(7)
source("functions.R")
ARL_Proc_Tol(method=Find_IC_RL_Fast, UCL=.2)
source("functions.R")
ARL_Proc_Tol(method=Find_IC_RL_Fast, UCL=.2)
source("functions.R")
ARL_Proc_Tol(method=Find_IC_RL_Fast, UCL=.2, tolerance=5)
46.7/sqrt(89)
x <- rnorm(100); y <- rnorm(100); perm.test(x,y, f=Max_Quan_TS)
x <- rnorm(100); y <- rnorm(100); perm.test(x,y, f=Max_Quan_TS, do.plot=TRUE)
x <- rnorm(100); y <- rnorm(100); perm.test(x,y, f=Max_Quan_TS, do.plot=TRUE)
x <- rnorm(100); y <- rnorm(100); perm.test(x,y, f=Max_Quan_TS, do.plot=TRUE)
x <- rnorm(100); y <- rnorm(100); perm.test(x,y, f=Max_Quan_TS, do.plot=TRUE)
x <- rnorm(100); y <- rnorm(100); perm.test(x,y, f=Max_Quan_TS, do.plot=TRUE)
x <- rnorm(100); y <- rnorm(100); perm.test(x,y, f=Max_Quan_TS, do.plot=TRUE)
x <- rnorm(100); y <- rnorm(100); perm.test(x,y, f=Max_Quan_TS, do.plot=TRUE)
x <- rnorm(100); y <- rnorm(100); perm.test(x,y, f=wave.bec, do.plot=TRUE)
x <- rnorm(100); y <- rnorm(100); perm.test(x,y, f=wave.bec, do.plot=TRUE)
x <- rnorm(100); y <- rnorm(100); perm.test(x,y, f=wave.bec, do.plot=TRUE)
x <- rnorm(100); y <- rnorm(100); perm.test(x,y, f=wave.bec, do.plot=TRUE)
x <- rnorm(100); y <- rnorm(100); perm.test(x,y, f=wave.bec, do.plot=TRUE)
source('~/Research/GoF-Test/functions.R')
x <- rnorm(100); y <- rnorm(100); perm.test(x,y, f=wave.bec, do.plot=TRUE)
source('~/Research/GoF-Test/functions.R')
x <- rnorm(100); y <- rnorm(100); perm.test(x,y, f=wave.bec, do.plot=TRUE)
x <- rnorm(100); y <- rnorm(100); perm.test(x,y, f=wave.bec, do.plot=TRUE)
source('~/Research/GoF-Test/functions.R')
rm(list=ls())
source("functions.R")
x <- rnorm(50)
y <- rnorm(30)
CvMTwoSamp.res(x,y)
rm(list=ls())
source("functions.R")
library(dgof)
set.seed(5)
x <- rnorm(50)
y <- rnorm(30)
CvMTwoSamp.res(x,y)
cvm.test(x,pnorm)
install.packages("dgof")
rm(list=ls())
source("functions.R")
library(dgof)
set.seed(5)
x <- rnorm(50)
y <- rnorm(30)
CvMTwoSamp.res(x,y)
cvm.test(x,pnorm)
?cvm.test
?sum
source('~/Research/GoF-Test/functions_power.R')
cvm.res(x,pnorm)
source('~/Research/GoF-Test/functions_power.R')
cvm.res(x,pnorm)
source('~/Research/GoF-Test/functions_power.R')
cvm.res(x,pnorm)
cvm.res(x,pnorm)
x <- 1:2
cvm.res(x,pnorm)
1/24 + (1/4 - pnorm(1)) + 3/4 - pnorm(2)
1/24 + (1/4 - pnorm(1))^2 + (3/4 - pnorm(2))^2
source('~/Research/GoF-Test/functions_power.R')
source('~/Research/GoF-Test/functions_power.R')
cvm.res(x,pnorm)
cvm.res(x,y)
y
source('~/Research/GoF-Test/functions_power.R')
cvm.res(x,pnorm)
cvm.res(x,y)
perm.test(x,y, f=cvm.res)
x
y
rm(list=ls())
source("functions.R")
library(dgof)
set.seed(5)
x <- rnorm(50)
y <- rnorm(30)
CvMTwoSamp.res(x,y)
cvm.test(x,pnorm)
cvm.res(x,pnorm)
cvm.res(x,y)
# Great, got the originals
# Lets try wavelet reduced version
perm.test(x,y, f=cvm.res)
x
y
?perm.test
perm.test
perm.test(x,y, f=cvm.res, num.perm=2001)
perm.test(x,y, f=cvm.res, num.perm=1001)
perm.test(x,y, f=cvm.res, num.perm=501)
perm.test(x,y, f=cvm.res, num.perm=2001)
perm.test(x,y, f=cvm.res, num.perm=1001)
perm.test(x,y, f=cvm.res, num.perm=501)
x <- rnorm(30)
lenx <- length(x)
y <- pnorm
if (is.list(y))
y <- names(y)
if (is.function(y))
funname <- as.character(substitute(y))
if (is.character(y))
funname <- y
y <- get(funname, mode = "function", envir = parent.frame())
if (!is.function(y))
stop("'y' must be numeric or a function or a string naming a valid function")
F_x <- y(x)
i <- 1:lenx
STAT <- 1/(12*lenx) + sum(((2*i-1)/(2*lenx) - y(x))^2)
STAT
cvm.test(x,pnorm)
cvm.res(x,pnorm)
y(x)
pnorm(x)
x <- sort(rnorm(30))
lenx <- length(x)
y <- pnorm
if (is.list(y))
y <- names(y)
if (is.function(y))
funname <- as.character(substitute(y))
if (is.character(y))
funname <- y
y <- get(funname, mode = "function", envir = parent.frame())
if (!is.function(y))
stop("'y' must be numeric or a function or a string naming a valid function")
F_x <- y(x)
i <- 1:lenx
STAT <- 1/(12*lenx) + sum(((2*i-1)/(2*lenx) - y(x))^2)
STAT
cvm.res(x,pnorm)
COMPONENTS <- ((2*i-1)/(2*lenx) - y(x))^2
STAT <- 1/(12*lenx) + sum(((2*i-1)/(2*lenx) - y(x))^2)
STAT
COMPONENTS
plot(componenets)
hist(components)
hist(COMPONENTS)
plot(components)
plot(COMPONENTS)
library(waveslim)
WAVE_COMP <- dwt(COMPONENTS)
?dwt
log2(30)
ceil(log2(30))
ceiling(log2(30))
?zeroes
?zero
x <- sort(rnorm(30))
lenx <- length(x)
y <- pnorm
if (is.list(y))
y <- names(y)
if (is.function(y))
funname <- as.character(substitute(y))
if (is.character(y))
funname <- y
y <- get(funname, mode = "function", envir = parent.frame())
if (!is.function(y))
stop("'y' must be numeric or a function or a string naming a valid function")
F_x <- y(x)
i <- 1:lenx
COMPONENTS <- ((2*i-1)/(2*lenx) - y(x))^2
STAT <- 1/(12*lenx) + sum(((2*i-1)/(2*lenx) - y(x))^2)
Z <-ceiling(log2(lenx))
Z <-REP(0,Z-lenx)
PAD_COMP <- c(COMPONENTS, Z)
x <- sort(rnorm(30))
lenx <- length(x)
y <- pnorm
if (is.list(y))
y <- names(y)
if (is.function(y))
funname <- as.character(substitute(y))
if (is.character(y))
funname <- y
y <- get(funname, mode = "function", envir = parent.frame())
if (!is.function(y))
stop("'y' must be numeric or a function or a string naming a valid function")
F_x <- y(x)
i <- 1:lenx
COMPONENTS <- ((2*i-1)/(2*lenx) - y(x))^2
STAT <- 1/(12*lenx) + sum(((2*i-1)/(2*lenx) - y(x))^2)
Z <-ceiling(log2(lenx))
Z <-rep(0,Z-lenx)
PAD_COMP <- c(COMPONENTS, Z)
PAD_COMP
COMPONENTS
Z
?rep
x <- sort(rnorm(30))
lenx <- length(x)
y <- pnorm
if (is.list(y))
y <- names(y)
if (is.function(y))
funname <- as.character(substitute(y))
if (is.character(y))
funname <- y
y <- get(funname, mode = "function", envir = parent.frame())
if (!is.function(y))
stop("'y' must be numeric or a function or a string naming a valid function")
F_x <- y(x)
i <- 1:lenx
COMPONENTS <- ((2*i-1)/(2*lenx) - y(x))^2
STAT <- 1/(12*lenx) + sum(((2*i-1)/(2*lenx) - y(x))^2)
Z <- ceiling(log2(lenx))
Z <- rep(0,times=Z-lenx)
PAD_COMP <- c(COMPONENTS, Z)
x <- sort(rnorm(30))
lenx <- length(x)
y <- pnorm
if (is.list(y))
y <- names(y)
if (is.function(y))
funname <- as.character(substitute(y))
if (is.character(y))
funname <- y
y <- get(funname, mode = "function", envir = parent.frame())
if (!is.function(y))
stop("'y' must be numeric or a function or a string naming a valid function")
F_x <- y(x)
i <- 1:lenx
COMPONENTS <- ((2*i-1)/(2*lenx) - y(x))^2
STAT <- 1/(12*lenx) + sum(((2*i-1)/(2*lenx) - y(x))^2)
Z <- ceiling(log2(lenx))
Z <- rep(0,(Z-lenx))
PAD_COMP <- c(COMPONENTS, Z)
Z
x <- sort(rnorm(30))
lenx <- length(x)
y <- pnorm
if (is.list(y))
y <- names(y)
if (is.function(y))
funname <- as.character(substitute(y))
if (is.character(y))
funname <- y
y <- get(funname, mode = "function", envir = parent.frame())
if (!is.function(y))
stop("'y' must be numeric or a function or a string naming a valid function")
F_x <- y(x)
i <- 1:lenx
COMPONENTS <- ((2*i-1)/(2*lenx) - y(x))^2
STAT <- 1/(12*lenx) + sum(((2*i-1)/(2*lenx) - y(x))^2)
Z <- ceiling(log2(lenx))
Z
##########################################################
x <- sort(rnorm(30))
lenx <- length(x)
y <- pnorm
if (is.list(y))
y <- names(y)
if (is.function(y))
funname <- as.character(substitute(y))
if (is.character(y))
funname <- y
y <- get(funname, mode = "function", envir = parent.frame())
if (!is.function(y))
stop("'y' must be numeric or a function or a string naming a valid function")
F_x <- y(x)
i <- 1:lenx
COMPONENTS <- ((2*i-1)/(2*lenx) - y(x))^2
STAT <- 1/(12*lenx) + sum(((2*i-1)/(2*lenx) - y(x))^2)
Z <- 2^ceiling(log2(lenx))
Z <- rep(0,(Z-lenx))
PAD_COMP <- c(COMPONENTS, Z)
PAD_COMP
WAVE_COMP <- dwt(PAD_COMP)
WAVE_COMP
?wave_comp
unlist(WAVECOMP)
unlist(WAVE_COMP)
COEFFS
COEFFS <- unlist(WAVE_COMP)
wave.den(x,y)
x
y
x <-rnorm(50); y <- rnorm(50); wave.den(x,y)
x <-rnorm(50); y <- rnorm(50); wave.den(x,y); perm.test(x,y,f=wave.den)
x <-rnorm(50); y <- rnorm(50); wave.den(x,y); perm.test(x,y,f=wave.den)
x <-rnorm(50); y <- rnorm(50,0,1.2); wave.den(x,y)
x <-rnorm(50); y <- rnorm(50,0,1.2); wave.den(x,y); perm.test(x,y,f=wave.den)
x <-rnorm(50); y <- rnorm(50,0,1.2); wave.den(x,y); perm.test(x,y,f=wave.den)
x <-rnorm(50); y <- rnorm(50,0,1.2); wave.den(x,y); perm.test(x,y,f=wave.den)
x <-rnorm(50); y <- rnorm(50,0,1.2); wave.den(x,y); perm.test(x,y,f=wave.den)
x <-rnorm(50); y <- rnorm(50,0,1.2); wave.den(x,y); perm.test(x,y,f=wave.den)
x <-rnorm(50); y <- rnorm(50,0,1.2); wave.den(x,y); perm.test(x,y,f=wave.den)
x <-rnorm(50); y <- rnorm(50,0.1,1); wave.den(x,y); perm.test(x,y,f=wave.den)
x <-rnorm(50); y <- rnorm(50,0.1,1); wave.den(x,y); perm.test(x,y,f=wave.den)
x <-rnorm(50); y <- rnorm(50,0.1,1); wave.den(x,y); perm.test(x,y,f=wave.den)
x <-rnorm(50); y <- rnorm(50,0.1,1); wave.den(x,y); perm.test(x,y,f=wave.den)
x <-rnorm(50); y <- rnorm(50,0.1,1); wave.den(x,y); perm.test(x,y,f=wave.den)
x <-rnorm(50); y <- rnorm(50,0.1,1); wave.den(x,y); perm.test(x,y,f=wave.den)
x <-rnorm(50); y <- rnorm(50,0.1,1); wave.den(x,y); perm.test(x,y,f=wave.den)
x <-rnorm(50); y <- rnorm(50,0.1,1); wave.den(x,y,doplot=TRUE); perm.test(x,y,f=wave.den)
x <-rnorm(50); y <- rnorm(50,0.1,1); wave.den(x,y,doplot=TRUE); perm.test(x,y,f=wave.den)
x <-rnorm(50); y <- rnorm(50,0.1,1); wave.den(x,y); perm.test(x,y,f=wave.den)
