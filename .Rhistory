TEST
test
test[1
,2]
test[c(1:5)]
names(test)
names(htest)
ks.test
showMethods("htest")
methods("htest")
methods(htest)
method(htest)
methods(mean)
methods(ks.test)
diag.plot(x,y
)
myts.out(x,y)
sort(x)
sort(y)
y[100]
x[100]
test
results
testmat <- results[[4]]
table(testmat)
testmat[[1]]
x
y
x1 <- 1:100
y1 <- c(-100,2:100)
x1
y1
perm.test.out(x,y,myts.out)
results1 <- perm.test.out(x,y,fmyts.out)
results1 <- perm.test.out(x,y,f=myts.out)
results1[5:6]
diag.plot(x,y)
diag.plot(x1,y1)
testmat1 <- results1[[4]]
table(testmat1)[[1]]
table(testmat1)
results1 <- perm.test.out(x1,y1,fmyts.out)
results1 <- perm.test.out(x1,y1,f=myts.out)
testmat1 <- results1[[4]]
table(testmat1)[[1]]
testmat
table(testmat)[[1]]
testmat
table(testmat
)
testmat
testmat[[1]]
table(testmat)[[1]]
?table
?table
table
?tabulte
?tabulate
tabulate(testmat)
max(tabulate(testmat))
which(max(tabulate(testmat)))
which.max(tabulate(testmat))
which.max(table(testmat))
names(which.max(table(testmat)))
testmat
table(testmat)
which.max(testmat)
which.max(table(testmat))
names(which.max(table(testmat)))
class(which.max(table(testmat)))
which.max(table(testmat))[1]
which.max(table(testmat))[[1]]
table(testmat)[7]
table(testmat)[7][2]
table(testmat)[7][1]
table(testmat)[7][[1]]
class(testmat)
mode(testmat)
source("functions.R")
x<- 1:100
y<- c(1:99,200)
results <- perm.test.out(x,y,f=myts.out)
results[c(1:3,5,6)]
results[4]
testmat
tab.q.m <- table(testmat1)
tab.q.m
tab.q.m <- table(testmat)
tab.q.m
as(names(which.max(tab.q.m)), mode(quan.mat))
as(names(which.max(tab.q.m)), mode(tab.q.m))
which.max(tab.q.m)[[1]]
which.max(tab.q.m)[[1]]
which.max(tab.q.m)[1]
table(testmat)[7][1]
table(testmat)[7][[1]]
source("functions.R")
x<- 1:100
y<- c(1:99,200)
results <- perm.test.out(x,y,f=myts.out)
results[c(1:3,5,6)]
perm.test(x,y,f=myts)
testlist <- perm.test(x,y,f=myts)
testlist[[4]] <- 8
testlist
testlist <- perm.test(x,y,f=myts)
testlist[[5]] <- 8
testlist
x
y
perm.test(x,y[1:99],f=myts)
testlist
testlist[6] <- 8
testlist
testlist[6] <- 9
testlist
names(testlist)
source("functions.R")
x<- 1:100
y<- c(1:99,200)
results <- perm.test.out(x,y,f=myts.out)
results[c(1:3),4,5,6]
results[c(1:3,4,5,6)]
results[c(1:3,4,5,6,7)]
results[c(1:3,4,5,6,7)]
#What should be happening
results2 <- perm.test(x,y[1:99],f=myts)
results2
results3 <- perm.test(x,y,f=myts)
results3
results2 <- perm.test(x,y[1:99],f=myts,diag.plot=TRUE)
results2
results3 <- perm.test(x,y,f=myts,diag.plot=TRUE)
results3
perm.test(x,y[1:99],f=myts,diag.plot=TRUE)
myts(x,y[1:99],diag.plot=TRUE)
myts(x,y[1:99],do.plot=TRUE)
myts(x,y,do.plot=TRUE)
ks.test(x,y)
ks.test(x,y[1:99])
x
y
results <- perm.test.out(x,y,f=myts.out)
results[c(1:3,4,5,6,7)]
#What should be happening
results2 <- perm.test(x,y[1:99],f=myts)
results2
myts(x,y[1:99],do.plot=TRUE)
results3 <- perm.test(x,y,f=myts)
results3
myts(x,y,do.plot=TRUE)
x<- 1:100
y<- c(-100,2:100)
results <- perm.test.out(x,y,f=myts.out)
results[c(1:3,4,5,6,7)]
#What should be happening
results2 <- perm.test(x,y[1:99],f=myts)
results2
myts(x,y[1:99],do.plot=TRUE)
results3 <- perm.test(x,y,f=myts)
results3
myts(x,y,do.plot=TRUE)
X
Y
x
y
x<- 1:100
y<- c(-100,2:100)
results <- perm.test.out(x,y,f=myts.out)
results[c(1:3,4,5,6,7)]
#What should be happening
results2 <- perm.test(x,y[2:100],f=myts)
results2
myts(x,y[1:99],do.plot=TRUE)
results3 <- perm.test(x,y,f=myts)
results3
myts(x,y,do.plot=TRUE)
x <- rnorm(100,0,sqrt(3))
y <- rt(100,3)
perm.test(x,y,f=myts)
myts(x,y,do.plot=TRUE)
perm.test.out(x,y,f=myts.out)
diag.plot(x,y)
y[70]
myts(x,y,do.plot=TRUE
)
x
y
lenx<-length(x)
leny<-length(y)
x1<-seq(1/lenx,1,1/lenx)
y1<-seq(1/leny,1,1/leny)
source("DeleteLater.R")
plot.ts(x,y,x1,y1,lenx,leny)
lenx
leny
x1
plot.ts(x,y,x1,y1,lenx,leny)
x
y
x<- sort(x)
y <- sort(y)
plot.ts(x,y,x1,y1,lenx,leny)
source("functions.R")
plot.ts(x,y,x1,y1,lenx,leny)
myts(x,y,do.plot=TRUE)
myts(x,y,do.plot=TRUE)
myts.out(x,y)
myts.out(x,y,do.plot=TRUE)
myts.out(x,y,do.plot=TRUE)
x
x1
quantile(x,probs=x1,type=4)
myts(x,dt,3)
myts(x,dt,3,do.plot=TRUE)
myts(x,gt,3,do.plot=TRUE)
?dt
myts(x,qt,3,do.plot=TRUE)
source("functions.R")
myts(x,qt,3,do.plot=TRUE)
source("functions.R")
myts(x,qt,3,do.plot=TRUE)
?get
envir()
environment()
x
y
source("functions.R")
myts(x,qt,3,do.plot=TRUE)
source("functions.R")
myts(x,qt,3)
myts(x,qt,3)
source("functions.R")
myts(x,qt,3)
myts(x,qt,3)[[2]]
source("functions.R")
myts(x,qt,3)
a < -myts(x,qt,3)
a <- myts(x,qt,3)
a[1]
a[[1]]
args
?args
?arg
source("functions.R")
a <- myts(x,qt,3)
a <- myts(x,qt,3,do.plot=TRUE)
source("functions.R")
a <- myts(x,qnorm,0,3,do.plot=TRUE)
a <- myts(x,qnorm,0,3)
a
source("functions.R")
a <- myts(x,qnorm,0,3)
a
unlist(a)
a
testa <- unlist(a)
a[1]
testa[1]
testa[2]
...
source("functions.R")
a <- myts(x,qt,3,do.plot=TRUE)
source("functions.R")
a <- myts(x,qt,3,do.plot=TRUE)
source("functions.R")
a <- myts(x,qt,3,do.plot=TRUE)
a <- myts(x,qt,3,do.plot=TRUE)
source("functions.R")
a <- myts(x,qt,3,do.plot=TRUE)
source("functions.R")
a <- myts(x,qt,3,do.plot=TRUE)
source("functions.R")
a <- myts(x,qt,3,do.plot=TRUE)
a <- myts.out(x,qt,3,do.plot=TRUE)
a <- myts.out(x,qt,3,do.plot=TRUE)
a <- myts.out(x,qnorm,0,3,do.plot=TRUE)
?pnorm
qnorm(5)
?qnorm
qnorm(.97,0,1)
qnorm(.97,0,2)
qnorm(.97,100,2)
source("functions.R")
a <- myts.out(x,qnorm,0,3,do.plot=TRUE)
source("functions.R")
a <- myts.out(x,qnorm,0,3,do.plot=TRUE)
source("functions.R")
a <- myts.out(x,qnorm,0,3,do.plot=TRUE)
source("functions.R")
a <- myts.out(x,qnorm,0,3,do.plot=TRUE)
source("functions.R")
a <- myts.out(x,qnorm,0,3,do.plot=TRUE)
a <- myts.out(x,qt,3,do.plot=TRUE)
?qnorm
a <- myts.out(x,qt,3,do.plot=TRUE)
type(x)
mode(x)
source("functions.R")
myts(qt,x)
class(qt)
class(x)
source("functions.R")
test <- "stringhere"
myts(test,x)
ks.test
ks.test(test,x)
test
test2 <-"stringtwo"
ks.test(test,test2)
source("functions.R")
myts(test,x)
y
myts(test,y)
testy <-y
testy[8] <- NULL
testy[8] <- NA
testy
myts(x,y)
x<- 1
y<- 2
myts(x,y)
x <- NULL
myts(x,y)
?type
?ks.test
rm(list=ls())
set.seed(5)
#loading in previous power tablese
load("~/Dropbox/Research/GoF Test/May20-Power.RData")
rm(results)
source("functions.R")
source("functions.R")
source("functions.R")
z<-250 #Number of Samples
lens<-c(10,20,50,100,200) #Number of Draws in each sample
num.dif.draws<-length(lens) #How many different draws?
num.test<-1 #Number of Different tests
results<-matrix(,nrow=num.dif.draws,ncol=num.test) #Will record rejection rate later
for(i in 1:num.dif.draws){
#Generating Data
x<-matrix(rnorm(z*lens[i],0,3),nrow=z,ncol=lens[i])#X ~ N(0,3)
y<-matrix(rt(z*lens[i],3),nrow=z,ncol=lens[i])#Y ~ t(3)
#Outlier Removal OBC
pvals<-power.res(x,y,f=myts.out,g=perm.test.out)
results[i,1]<-sum(pvals<.05)/z #rejection Rate for OBC
}
liResults[[1]]<-cbind(liResults[[1]],results)
colnames(liResults[[1]])[5]<-c("OBC_out")
#################################################
#N(0,sqrt(3)) vs t(3)
#Notes that these distributions have identical variances
ptm<-proc.time()
z<-250 #Number of Samples
lens<-c(10,20,50,100,200) #Number of Draws in each sample
num.dif.draws<-length(lens) #How many different draws?
num.test<-1 #Number of Different tests
results<-matrix(,nrow=num.dif.draws,ncol=num.test) #Will record rejection rate later
for(i in 1:num.dif.draws){
#Generating Data
x<-matrix(rnorm(z*lens[i],0,sqrt(3)),nrow=z,ncol=lens[i])#X ~ N(0,sqrt(3))
y<-matrix(rt(z*lens[i],3),nrow=z,ncol=lens[i])#Y ~ t(3)
#Outlier Removal OBC
pvals<-power.res(x,y,f=myts.out,g=perm.test.out)
results[i,1]<-sum(pvals<.05)/z #rejection Rate for OBC
}
liResults[[2]]<-cbind(liResults[[2]],results)
colnames(liResults[[2]])[5]<-c("OBC_out")
############################################################
#N(0,2) vs exp(1/2)
#Notes that these distributions have identical variances (different means)
ptm<-proc.time()
z<-250 #Number of Samples
lens<-c(10,20,50,100,200) #Number of Draws in each sample
num.dif.draws<-length(lens) #How many different draws?
num.test<-1 #Number of Different tests
results<-matrix(,nrow=num.dif.draws,ncol=num.test) #Will record rejection rate later
for(i in 1:num.dif.draws){
#Generating Data
x<-matrix(rnorm(z*lens[i],0,2),nrow=z,ncol=lens[i])#X ~ N(0,2)
y<-matrix(rexp(z*lens[i],1/2),nrow=z,ncol=lens[i])#Y ~ exp(1/2)
#Outlier Removal OBC
pvals<-power.res(x,y,f=myts.out,g=perm.test.out)
results[i,1]<-sum(pvals<.05)/z #rejection Rate for OBC
}
liResults[[3]]<-cbind(liResults[[3]],results)
colnames(liResults[[3]])[5]<-c("OBC_out")
#########################################
#N(0,1) vs N(0,2)
#Notes that these distributions have different variances
ptm<-proc.time()
z<-250 #Number of Samples
lens<-c(10,20,50,100,200) #Number of Draws in each sample
num.dif.draws<-length(lens) #How many different draws?
num.test<-1 #Number of Different tests
results<-matrix(,nrow=num.dif.draws,ncol=num.test) #Will record rejection rate later
for(i in 1:num.dif.draws){
#Generating Data
x<-matrix(rnorm(z*lens[i],0,1),nrow=z,ncol=lens[i])#X ~ N(0,1)
y<-matrix(rnorm(z*lens[i],0,2),nrow=z,ncol=lens[i])#Y ~ N(0,3)
#Outlier Removal OBC
pvals<-power.res(x,y,f=myts.out,g=perm.test.out)
results[i,1]<-sum(pvals<.05)/z #rejection Rate for OBC
}
liResults[[4]]<-cbind(liResults[[4]],results)
colnames(liResults[[1]])[4]<-c("OBC_out")
#################
#N(3,3) vs Gamma(3,1)
#Notes that these distributions have different variances
ptm<-proc.time()
z<-250 #Number of Samples
lens<-c(10,20,50,100,200) #Number of Draws in each sample
num.dif.draws<-length(lens) #How many different draws?
num.test<-1 #Number of Different tests
results<-matrix(,nrow=num.dif.draws,ncol=num.test) #Will record rejection rate later
for(i in 1:num.dif.draws){
#Generating Data
x<-matrix(rnorm(z*lens[i],0,sqrt(3)),nrow=z,ncol=lens[i])#X ~ N(3,3)
y<-matrix(rgamma(z*lens[i],3,shape=1),nrow=z,ncol=lens[i])#Y ~ Gamma(alpha=3,beta=1) (shape=1,rate=1)
#Outlier Removal OBC
pvals<-power.res(x,y,f=myts.out,g=perm.test.out)
results[i,1]<-sum(pvals<.05)/z #rejection Rate for OBC
}
liResults[[5]]<-cbind(liResults[[5]],results)
colnames(liResults[[5]])[5]<-c("OBC_out")
################################
save.image("June18-UpdateMay20.RData")
savehistory("June18-UpdateMay20.Rhistory")
shinyapps::setAccountInfo(name='morndorff', token='0860123ED911EEDB90A75E15EC11D097', secret='f+Gif2ZTLvggluo07bL1h1AlH4IRM0MPEOaEbVLs')
library(shinyapps)
shinyapps::setAccountInfo(name='morndorff', token='0860123ED911EEDB90A75E15EC11D097', secret='f+Gif2ZTLvggluo07bL1h1AlH4IRM0MPEOaEbVLs')
load("/home/mark/Dropbox/Research/GoF Test/Power Simulations/6 Test Power sims June 18/June30-Power.RData")
source("/home/mark/Dropbox/Research/GoF Test/plot_functions.R")
diag.plot(x[1,], y[1,])
library(ggplot2)
?ggplot2
?ggplot
ggplot
diag.plot
?object.size
object.size(liData200)
object.size(liData200[1])
rm(list=ls())
library(CDFt)
x <- rnorm(100)
y <- rnorm(100)
CramerVonMisesTwoSamples(x, y)
sortx <- sort(x)
sorty <- sort(y)
M <- length(sortx)
N <- length(sorty)
a <- data.frame(val=sortx, range=seq(M), ens= rep(1,M))
b <- data.frame(val=sorty, range=seq(N), ens= rep(2,N))
head(a)
head(b)
d <- rbind(a,b)
head(d)
d <- d[order(d$val), ]
head(d)
d <- data.frame(d,rangTot = seq(M +N))
head(d)
dtfM = d[which(d$ens == 1), ]
head(dtfM)
dtfN = d[which(d$ens == 2), ]
somN = sum((dtfN$rang - dtfN$rangTot)^2)
somM = sum((dtfM$rang - dtfM$rangTot)^2)
U = N * somN + M * somM
CvM = ((U/(N * M))/(N + M)) - ((4 * M * N - 1)/(6 * (M +
N)))
CvM
CramerVonMisesTwoSamples
cvM
CvM
head(dtfM)
sortx <- sort(x)
sorty <- sort(y)
M <- length(sortx)
N <- length(sorty)
a <- data.frame(val=sortx, rang=seq(M), ens= rep(1, M))
b <- data.frame(val=sorty, rang=seq(N), ens= rep(2, N))
head(a)
head(b)
d <- rbind(a, b)
head(d)
d <- d[order(d$val), ]
head(d)
d <- data.frame(d,rangTot = seq(M +N))
head(d)
dtfM = d[which(d$ens == 1), ]
head(dtfM)
dtfN = d[which(d$ens == 2), ]
somN = sum((dtfN$rang - dtfN$rangTot)^2)
somM = sum((dtfM$rang - dtfM$rangTot)^2)
U = N * somN + M * somM
CvM = ((U/(N * M))/(N + M)) - ((4 * M * N - 1)/(6 * (M +
N)))
CvM
SomN
somN
library(CDFt)
CramerVonMisesTwoSamples
setwd("~/Dropbox/Research/GoF Test")
source("functions.R")
myts.par(x,qnorm)
x
x <- rnorm(100)
myts.par(x,qnorm)
myts.par
source("functions.R")
myts.par(x,qnorm)
myts.par(x,qt,3)
myts.par(x,qnorm,0,2)
