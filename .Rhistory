num.dist.test <- length(dist_one)  #Number of different distributions to test
# Distribution 2
dist_two <- list("t", "t", "exp", "norm", "gamma", "unif", "beta", "beta")
param_two <- list(list(df = 3),
list(df = 3),
list(rate = 0.5),
list(mean = 0, sd = 2),
list(shape = 1, rate = 3),
list(min = 0, max = 2),
list(shape1 = 0.5, shape2 = 0.5),
list(shape1 = 0.2, shape2 = 2))
dist <-list(dist_one, dist_two)
param <- list(param_one, param_two)
# Methods to use
liMethods <- list(myts = myts,
ks.res.simp = ks.res.simp,
myts.max.simp=myts.max.simp,
myts.par=myts.par)
num.methods <- length(liMethods)
method_param <- list(NULL,
NULL,
NULL,
NULL)
# P-Value Cutoff to assess power
cutoff <- 0.05
# Generating Data
liData <- vector(mode = "list", length = num.dist.test)
# results <- matrix(, nrow = num.samps ncol = num.test) #Will record rejection rate
# later
for (i in 1:num.dist.test) {
liDist <- vector(mode="list", length=2)
for (j in 1:2){
samps <- vector(mode = "list", length = num.samps)
for (k in 1:num.samps) {
x <- matrix(make_sample(n = z * lens[k], dist = dist[[j]][[i]], param = param[[j]][[i]]),
nrow = z, ncol = lens[k])
samps[[k]] <- x
}
liDist[[j]] <- samps
}
liData[[i]] <- liDist
}
str(liData)
str(dist)
dist[[j]][[i]]
# Naming
for (i in 1:num.dist.test) {
for (j in 1:2){
names(liData)[i][j] <- paste(dist[[j]][[i]], "(", paste(param[[j]][[i]], collapse = ","), ")",
sep = "")
}
}
str(liData)
rm(list=ls())
set.seed(5)
source("functions.R")
# Initializing Power Simulation Parameters
z <- 500  #Number of samples
lens <- c(10, 20, 50, 100, 200)  #Number of draws in each sample
num.samps <- length(lens)  #How many different draws?
# Distribution 1
dist_one <- list("norm", "norm", "norm", "norm", "norm", "unif", "unif", "unif")
param_one <- list(list(mean = 0, sd = 3),
list(mean = 0, sd = sqrt(3)),
list(mean = 0, sd = 2),
list(mean = 0, sd = 1),
list(mean = 0, sd = sqrt(3)),
list(min = 0.5, max = 1.5),
list(min = 0, max = 1),
list(min = 0, max = 1))
num.dist.test <- length(dist_one)  #Number of different distributions to test
# Distribution 2
dist_two <- list("t", "t", "exp", "norm", "gamma", "unif", "beta", "beta")
param_two <- list(list(df = 3),
list(df = 3),
list(rate = 0.5),
list(mean = 0, sd = 2),
list(shape = 1, rate = 3),
list(min = 0, max = 2),
list(shape1 = 0.5, shape2 = 0.5),
list(shape1 = 0.2, shape2 = 2))
dist <-list(dist_one, dist_two)
param <- list(param_one, param_two)
# Methods to use
liMethods <- list(myts = myts,
ks.res.simp = ks.res.simp,
myts.max.simp=myts.max.simp,
myts.par=myts.par)
num.methods <- length(liMethods)
method_param <- list(NULL,
NULL,
NULL,
NULL)
# P-Value Cutoff to assess power
cutoff <- 0.05
# Generating Data
liData <- vector(mode = "list", length = num.dist.test)
# results <- matrix(, nrow = num.samps ncol = num.test) #Will record rejection rate
# later
for (i in 1:num.dist.test) {
liDist <- vector(mode="list", length=2)
for (j in 1:2){
samps <- vector(mode = "list", length = num.samps)
for (k in 1:num.samps) {
x <- matrix(make_sample(n = z * lens[k], dist = dist[[j]][[i]], param = param[[j]][[i]]),
nrow = z, ncol = lens[k])
samps[[k]] <- x
}
liDist[[j]] <- samps
}
liData[[i]] <- liDist
}
str(liData)
names(liData)[1][2] <- "test"
names(liData)[1][[2]] <- "test"
names(liData)[[1]][2] <- "test"
rm(list=ls())
set.seed(5)
source("functions.R")
# Initializing Power Simulation Parameters
z <- 500  #Number of samples
lens <- c(10, 20, 50, 100, 200)  #Number of draws in each sample
num.samps <- length(lens)  #How many different draws?
# Distribution 1
dist_one <- list("norm", "norm", "norm", "norm", "norm", "unif", "unif", "unif")
param_one <- list(list(mean = 0, sd = 3),
list(mean = 0, sd = sqrt(3)),
list(mean = 0, sd = 2),
list(mean = 0, sd = 1),
list(mean = 0, sd = sqrt(3)),
list(min = 0.5, max = 1.5),
list(min = 0, max = 1),
list(min = 0, max = 1))
num.dist.test <- length(dist_one)  #Number of different distributions to test
# Distribution 2
dist_two <- list("t", "t", "exp", "norm", "gamma", "unif", "beta", "beta")
param_two <- list(list(df = 3),
list(df = 3),
list(rate = 0.5),
list(mean = 0, sd = 2),
list(shape = 1, rate = 3),
list(min = 0, max = 2),
list(shape1 = 0.5, shape2 = 0.5),
list(shape1 = 0.2, shape2 = 2))
dist <-list(dist_one, dist_two)
param <- list(param_one, param_two)
# Methods to use
liMethods <- list(myts = myts,
ks.res.simp = ks.res.simp,
myts.max.simp=myts.max.simp,
myts.par=myts.par)
num.methods <- length(liMethods)
method_param <- list(NULL,
NULL,
NULL,
NULL)
# P-Value Cutoff to assess power
cutoff <- 0.05
# Generating Data
liData <- vector(mode = "list", length = num.dist.test)
# results <- matrix(, nrow = num.samps ncol = num.test) #Will record rejection rate
# later
for (i in 1:num.dist.test) {
liDist <- vector(mode="list", length=2)
for (j in 1:2){
samps <- vector(mode = "list", length = num.samps)
for (k in 1:num.samps) {
x <- matrix(make_sample(n = z * lens[k], dist = dist[[j]][[i]], param = param[[j]][[i]]),
nrow = z, ncol = lens[k])
samps[[k]] <- x
}
liDist[[j]] <- samps
}
liData[[i]] <- liDist
}
names(liData)[[1]][2] <- "test"
str(liData)
str(liData[1])
str(liData[1][1])
str(liData[[1]])
str(liData[[1]][[1]])
rm(list=ls())
set.seed(5)
source("functions.R")
# Initializing Power Simulation Parameters
z <- 500  #Number of samples
lens <- c(10, 20, 50, 100, 200)  #Number of draws in each sample
num.samps <- length(lens)  #How many different draws?
# Distribution 1
dist_one <- list("norm", "norm", "norm", "norm", "norm", "unif", "unif", "unif")
param_one <- list(list(mean = 0, sd = 3),
list(mean = 0, sd = sqrt(3)),
list(mean = 0, sd = 2),
list(mean = 0, sd = 1),
list(mean = 0, sd = sqrt(3)),
list(min = 0.5, max = 1.5),
list(min = 0, max = 1),
list(min = 0, max = 1))
num.dist.test <- length(dist_one)  #Number of different distributions to test
# Distribution 2
dist_two <- list("t", "t", "exp", "norm", "gamma", "unif", "beta", "beta")
param_two <- list(list(df = 3),
list(df = 3),
list(rate = 0.5),
list(mean = 0, sd = 2),
list(shape = 1, rate = 3),
list(min = 0, max = 2),
list(shape1 = 0.5, shape2 = 0.5),
list(shape1 = 0.2, shape2 = 2))
dist <-list(dist_one, dist_two)
param <- list(param_one, param_two)
# Methods to use
liMethods <- list(myts = myts,
ks.res.simp = ks.res.simp,
myts.max.simp=myts.max.simp,
myts.par=myts.par)
num.methods <- length(liMethods)
method_param <- list(NULL,
NULL,
NULL,
NULL)
# P-Value Cutoff to assess power
cutoff <- 0.05
# Generating Data
liData <- vector(mode = "list", length = num.dist.test)
# results <- matrix(, nrow = num.samps ncol = num.test) #Will record rejection rate
# later
for (i in 1:num.dist.test) {
liDist <- vector(mode="list", length=2)
for (j in 1:2){
samps <- vector(mode = "list", length = num.samps)
for (k in 1:num.samps) {
x <- matrix(make_sample(n = z * lens[k], dist = dist[[j]][[i]], param = param[[j]][[i]]),
nrow = z, ncol = lens[k])
samps[[k]] <- x
}
liDist[[j]] <- samps
}
liData[[i]] <- liDist
}
# Naming
for (i in 1:num.dist.test) {
for (j in 1:2){
names(liData)[[i]][[j]] <- paste(dist[[j]][[i]], "(", paste(param[[j]][[i]], collapse = ","), ")",
sep = "")
}
}
rm(list=ls())
set.seed(5)
source("functions.R")
# Initializing Power Simulation Parameters
z <- 500  #Number of samples
lens <- c(10, 20, 50, 100, 200)  #Number of draws in each sample
num.samps <- length(lens)  #How many different draws?
# Distribution 1
dist_one <- list("norm", "norm", "norm", "norm", "norm", "unif", "unif", "unif")
param_one <- list(list(mean = 0, sd = 3),
list(mean = 0, sd = sqrt(3)),
list(mean = 0, sd = 2),
list(mean = 0, sd = 1),
list(mean = 0, sd = sqrt(3)),
list(min = 0.5, max = 1.5),
list(min = 0, max = 1),
list(min = 0, max = 1))
num.dist.test <- length(dist_one)  #Number of different distributions to test
# Distribution 2
dist_two <- list("t", "t", "exp", "norm", "gamma", "unif", "beta", "beta")
param_two <- list(list(df = 3),
list(df = 3),
list(rate = 0.5),
list(mean = 0, sd = 2),
list(shape = 1, rate = 3),
list(min = 0, max = 2),
list(shape1 = 0.5, shape2 = 0.5),
list(shape1 = 0.2, shape2 = 2))
dist <-list(dist_one, dist_two)
param <- list(param_one, param_two)
# Methods to use
liMethods <- list(myts = myts,
ks.res.simp = ks.res.simp,
myts.max.simp=myts.max.simp,
myts.par=myts.par)
num.methods <- length(liMethods)
method_param <- list(NULL,
NULL,
NULL,
NULL)
# P-Value Cutoff to assess power
cutoff <- 0.05
# Generating Data
liData <- vector(mode = "list", length = num.dist.test)
# results <- matrix(, nrow = num.samps ncol = num.test) #Will record rejection rate
# later
for (i in 1:num.dist.test) {
liDist <- vector(mode="list", length=2)
for (j in 1:2){
samps <- vector(mode = "list", length = num.samps)
for (k in 1:num.samps) {
x <- matrix(make_sample(n = z * lens[k], dist = dist[[j]][[i]], param = param[[j]][[i]]),
nrow = z, ncol = lens[k])
samps[[k]] <- x
}
liDist[[j]] <- samps
}
liData[[i]] <- liDist
}
names(liData)[[1]][[2]] <- "test"
str(liData)
liData <- vector(mode = "list", length = num.dist.test)
# results <- matrix(, nrow = num.samps ncol = num.test) #Will record rejection rate
# later
for (i in 1:num.dist.test) {
liDist <- vector(mode="list", length=2)
for (j in 1:2){
samps <- vector(mode = "list", length = num.samps)
for (k in 1:num.samps) {
x <- matrix(make_sample(n = z * lens[k], dist = dist[[j]][[i]], param = param[[j]][[i]]),
nrow = z, ncol = lens[k])
samps[[k]] <- x
}
liDist[[j]] <- samps
}
liData[[i]] <- liDist
}
names(liData)[1][[1]] <- "test"
str(liData)
names(liData)[1][[1]][[1]] <- "norm"
str(liData)
names(liData)[[1]][[1]][[1]] <- "norm"
str(liData)
liData <- vector(mode = "list", length = num.dist.test)
# results <- matrix(, nrow = num.samps ncol = num.test) #Will record rejection rate
# later
for (i in 1:num.dist.test) {
liDist <- vector(mode="list", length=2)
for (j in 1:2){
samps <- vector(mode = "list", length = num.samps)
for (k in 1:num.samps) {
x <- matrix(make_sample(n = z * lens[k], dist = dist[[j]][[i]], param = param[[j]][[i]]),
nrow = z, ncol = lens[k])
samps[[k]] <- x
}
liDist[[j]] <- samps
}
liData[[i]] <- liDist
}
names(liData)[[1]][[1]][[1]] <- "norm"
str(liData)
liData <- vector(mode = "list", length = num.dist.test)
# results <- matrix(, nrow = num.samps ncol = num.test) #Will record rejection rate
# later
for (i in 1:num.dist.test) {
liDist <- vector(mode="list", length=2)
for (j in 1:2){
samps <- vector(mode = "list", length = num.samps)
for (k in 1:num.samps) {
x <- matrix(make_sample(n = z * lens[k], dist = dist[[j]][[i]], param = param[[j]][[i]]),
nrow = z, ncol = lens[k])
samps[[k]] <- x
}
liDist[[j]] <- samps
}
liData[[i]] <- liDist
}
names(liData)
names(liData)[1] <- "first"
names(liData)[2] <- "second"
str(liData)
names(liData)[[1]][1] <- "first, second level"
str(liData)
liData <- vector(mode = "list", length = num.dist.test)
# results <- matrix(, nrow = num.samps ncol = num.test) #Will record rejection rate
# later
for (i in 1:num.dist.test) {
liDist <- vector(mode="list", length=2)
for (j in 1:2){
samps <- vector(mode = "list", length = num.samps)
for (k in 1:num.samps) {
x <- matrix(make_sample(n = z * lens[k], dist = dist[[j]][[i]], param = param[[j]][[i]]),
nrow = z, ncol = lens[k])
samps[[k]] <- x
}
liDist[[j]] <- samps
}
liData[[i]] <- liDist
}
names(liData[1][1])[1] <- "correct
names(liData[1][1])[1] <- "correct"
str(liData)
names(liData[1])[1] <- "correct"
str(liData)
for (i in 1:num.dist.test) {
for (j in 1:2){
names(liData[[i]])[j] <- paste(dist[[j]][[i]], "(", paste(param[[j]][[i]], collapse = ","), ")",
sep = "")
}
}
str(liData)
liData[[1]][[1]][1]
test <- liData[[1]][[1]][1]
str(test)
test <- liData[[1]][[1]][[1]]
str(test)
str(liData)
test <- liData[[1]][[1]][[2]]
str(test)
str(liData)
test <- liData[[1]][[2]][[2]]
str(test)
str(liData)
source("functions.R")
x <- matrix(rnorm(2000),nrow=100,ncol=20)
str(x)
y <- matrix(rnorm(2000,0,2),nrow=100,ncol=20)
source("functions.R")
power.res.twosamp(x,y,f=myts)
source("functions.R")
power.res.twosamp(x,y,f=myts)
y <- matrix(rnorm(2000,0,8),nrow=100,ncol=20)
power.res.twosamp(x,y,f=myts)
rm(list=ls())
set.seed(5)
source("functions.R")
# Initializing Power Simulation Parameters
z <- 14  #Number of samples
lens <- c(4, 5, 6, 7, 8)  #Number of draws in each sample
num.samps <- length(lens)  #How many different draws?
# Distribution 1
dist_one <- list("norm", "norm", "norm", "norm", "norm", "unif", "unif", "unif")
param_one <- list(list(mean = 0, sd = 3),
list(mean = 0, sd = sqrt(3)),
list(mean = 0, sd = 2),
list(mean = 0, sd = 1),
list(mean = 0, sd = sqrt(3)),
list(min = 0.5, max = 1.5),
list(min = 0, max = 1),
list(min = 0, max = 1))
num.dist.test <- length(dist_one)  #Number of different distributions to test
# Distribution 2
dist_two <- list("t", "t", "exp", "norm", "gamma", "unif", "beta", "beta")
param_two <- list(list(df = 3),
list(df = 3),
list(rate = 0.5),
list(mean = 0, sd = 2),
list(shape = 1, rate = 3),
list(min = 0, max = 2),
list(shape1 = 0.5, shape2 = 0.5),
list(shape1 = 0.2, shape2 = 2))
dist <-list(dist_one, dist_two)
param <- list(param_one, param_two)
# Methods to use
liMethods <- list(myts = myts,
ks.res.simp = ks.res.simp,
myts.max.simp=myts.max.simp,
myts.par=myts.par)
num.methods <- length(liMethods)
method_param <- list(NULL,
NULL,
NULL,
NULL)
# P-Value Cutoff to assess power
cutoff <- 0.05
# Generating Data
liData <- vector(mode = "list", length = num.dist.test)
# results <- matrix(, nrow = num.samps ncol = num.test) #Will record rejection rate
# later
for (i in 1:num.dist.test) {
liDist <- vector(mode="list", length=2)
for (j in 1:2){
samps <- vector(mode = "list", length = num.samps)
for (k in 1:num.samps) {
x <- matrix(make_sample(n = z * lens[k], dist = dist[[j]][[i]], param = param[[j]][[i]]),
nrow = z, ncol = lens[k])
samps[[k]] <- x
}
liDist[[j]] <- samps
}
liData[[i]] <- liDist
}
# Naming
for (i in 1:num.dist.test) {
for (j in 1:2){
names(liData[[i]])[j] <- paste(dist[[j]][[i]], "(", paste(param[[j]][[i]], collapse = ","), ")",
sep = "")
}
}
str(liData)
# Doing tests and generating P-Values
liPVals <- vector(mode = "list", length = num.dist.test)
for (i in 1:num.dist.test) {
pval_samp <- vector(mode = "list", length = num.samps)
# Number of sample sizes (10, 20, 50, 100)
for (j in 1:num.samps) {
# Looking up Data to Use
x <- liData[[i]][[1]][[j]]
y <- liData[[i]][[2]][[j]]
pval_methods <- vector(mode = "list", length = num.methods)
# Number of methods to test with
for (k in 1:num.methods) {
# Evaluating using the correct method if(liMethods[[k]]=='myts.out'){ pvals <-
# power.res.onesamp(x, y=paste('q',null_dist[[i]],sep=''), null_param[[i]],
# f=liMethods[[k]], g=new.perm.test.out) }
pvals <- power.res.twosamp(x, y,
f = names(liMethods[k]),
fops = method_param[[k]],
g = perm.test)
pval_methods[[k]] <- pvals
}
pval_samp[[j]] <- pval_methods
}
liPVals[[i]] <- pval_samp
}
