testa<-which(comdata$Sex.x=="F")
testb<-which(comdata$Sex.y=="Female")
identical(testa,testb)
testc<-which(comdata$Sex.x=="M")
testd<-which(comdata$Sex.y=="Male")
identical(testc,testd)
#Removing redundant variables
names(comdata)
comdata$Sex<-comdata$Sex.x
comdata$Sex.x<-NULL
comdata$Sex.y<-NULL
comdata$Party<-comdata$Party.x
comdata$Party.x<-NULL
comdata$Party.y<-NULL
comdata$Race<-comdata$Race.x
comdata$Race.x<-NULL
comdata$Race.y<-NULL
comdata$G1n12<-comdata$G1n12.x
comdata$G1n12.x<-NULL
comdata$G1n12.y<-NULL
comdata$X2rim3ry12<-NULL
names(comdata)
View(comdata)
#Making Distance Variables Clear
comdata$Miles.PL<-comdata$Miles
comdata$Miles<-NULL
comdata$Miles.EV<-round(comdata$Feet/5280,2)
comdata$Feet<-NULL
View(comdata)
comdata$Dif.PL.EV<-comdata$Miles.PL-comdata$Miles.EV
View(comdata)
#Creating some new variables
comdata$early_gen <- 0 #gen standds for generated, so we can keep track. Also avoids confusion with factor label "early"
comdata$early_gen <- ifelse(comdata$G1n12=="early",1,0)
comdata$early_gen <- factor(comdata$early_gen,labels=c("other","early"))
comdata$polls_gen <- 0
comdata$polls_gen <- ifelse(comdata$G1n12=="at polls",1,0)
comdata$polls_gen <- factor(comdata$polls_gen,labels=c("other","at polls"))
cor(comdata$Miles.PL,as.numeric(comdata$early_gen))
cor(comdata$Miles.EV,as.numeric(comdata$early_gen))
mnew<-glm(early_gen~Dif.PL.EV,data=subset(comdata,G1n12!="no vote" & G1n12!="mail"& G1n12!="missing"),family=binomial)
summary(mnew)
mnew2<-glm(early_gen~Dif.PL.EV+Miles.PL,data=subset(comdata,G1n12!="no vote" & G1n12!="mail"& G1n12!="missing"),family=binomial)
summary(mnew2)
load("C:/Users/Mark/Dropbox/Shared with Mark/Combine_Distances.R")
evdata  <-  read.csv("C:/Users/Mark/Dropbox/Shared with Mark/earlyvotesites.csv")
evdata28 <- read.csv("C:/Users/Mark/Dropbox/Shared with Mark/pollingmay28.csv")
#Making sure data types are correctly assigned
evdata28$Sex <- as.factor(evdata28$Sex) #Note: 578 unassigned values
evdata28$Race <- as.factor(evdata28$Race)
evdata28$G1n12 <- as.factor(evdata28$G1n12)
evdata28$Party <- as.factor(evdata28$Party)
evdata28$Prim3ry12 <- as.factor(evdata28$Prim3ry12)
#Making sure data types are correctly assigned
evdata$Sex <- as.factor(evdata$Sex)
evdata$Race <- as.factor(evdata$Race)
evdata$G1n12 <- as.factor(evdata$G1n12)
evdata$Party <- as.factor(evdata$Party)
evdata$X2rim3ry12 <- as.factor(evdata$X2rim3ry12)
#Making some Data Labels
#Note: Assuming they have the same meanings as the May 28 Codebook Values -- Double check with Matt
evdata$G1n12 <- factor(evdata$G1n12,levels=c(1,2,3,4,"Y"),labels=c("early","at polls","mail","no vote","missing"))
#Making some Data Labels
evdata28$G1n12 <- factor(evdata28$G1n12,levels=c(0,1,2,3,4),labels=c("missing","early","at polls","mail","no vote"))
evdata28$Race <- factor(evdata28$Race,levels=c(0,1,2,3,4,5),labels=c("White","African American","Asian","Hispanic","Native American","Other"))
evdata28$Sex <- factor(evdata28$Sex,labels=c("Male","Female"))
evdata28$Party <- factor(evdata28$Party,labels=c("Dem","Repub","Other"))
comdata<-merge(evdata,evdata28,by="matchbacki")
#Testing that merged variables agree
testa<-which(comdata$Sex.x=="F")
testb<-which(comdata$Sex.y=="Female")
identical(testa,testb)
testc<-which(comdata$Sex.x=="M")
testd<-which(comdata$Sex.y=="Male")
identical(testc,testd)
#Removing redundant variables
names(comdata)
comdata$Sex<-comdata$Sex.x
comdata$Sex.x<-NULL
comdata$Sex.y<-NULL
comdata$Party<-comdata$Party.x
comdata$Party.x<-NULL
comdata$Party.y<-NULL
comdata$Race<-comdata$Race.x
comdata$Race.x<-NULL
comdata$Race.y<-NULL
comdata$G1n12<-comdata$G1n12.x
comdata$G1n12.x<-NULL
comdata$G1n12.y<-NULL
comdata$X2rim3ry12<-NULL
names(comdata)
#Making Distance Variables Clear
comdata$Miles.PL<-comdata$Miles
comdata$Miles<-NULL
comdata$Miles.EV<-round(comdata$Feet/5280,2)
comdata$Feet<-NULL
#Creating new Distance Variable
#Difference between PL and Early Vote Site
comdata$Dif.PL.EV<-comdata$Miles.PL-comdata$Miles.EV
#Note: so if this variable is postive, the election date site is
#farther away than the early vote site.
#In general, election date sites are closer than early voting sites
mean(comdata$Dif.PL.EV) #mean is negative
#Creating some new variables
comdata$early_gen <- 0 #gen standds for generated, so we can keep track. Also avoids confusion with factor label "early"
comdata$early_gen <- ifelse(comdata$G1n12=="early",1,0)
comdata$early_gen <- factor(comdata$early_gen,labels=c("other","early"))
comdata$polls_gen <- 0
comdata$polls_gen <- ifelse(comdata$G1n12=="at polls",1,0)
comdata$polls_gen <- factor(comdata$polls_gen,labels=c("other","at polls"))
rm('testa','testb')
rm('testc','testd')
save.image("C:/Users/Mark/Dropbox/Shared with Mark/ComData.RData")
View(comdata)
View(comdata)
comdata$DISTANCE<-NULL
View(comdata)
comdata$PrecinctNA<-NULL
View(comdata)
comdata$PrecinctNa<-NULL
View(comdata)
save.image("C:/Users/Mark/Dropbox/Shared with Mark/ComData.RData")
load("C:/Users/Mark/Dropbox/Shared with Mark/ComData.RData")
summary(comdata$G1n12)
load("C:/Users/Mark/Dropbox/Shared with Mark/ComData.RData")
#These Models are run under the philosophy of 'Part 2' of the policy memo
m1<-glm(early_gen~Miles.EV,data=subset(comdata,G1n12!="at polls" & G1n12!="mail" & G1n12!="missing"),family=binomial)
m2<-glm(polls_gen~Miles.PL,data=subset(comdata,G1n12!="early" & G1n12!="mail" & G1n12!="missing"),family=binomial)
m3<-glm(early_gen~Miles.PL+Dif.PL.EV,data=subset(comdata,G1n12!="no vote" & G1n12!="mail" & G1n12!="missing"),family=binomial)
summary(m1)
summary(m2)
summary(m3)
m1$coef
m1.coef<-m1$coef[2]
m1.coef<-m1$coef[2]
exp(m1.coef)
x<-seq(0,5,length.out=1000)
exp(-.148)
m1.OR<-exp(m1.coef)
test.OR<-.863
x<-seq(0,5,length.out=1000)
y<-exp(x*test.OR)
plot(x,y)
plot(comdata$Miles,m1$fitted,col="red",type="l")
dim(m1$fitted)
length(m1$fitted)
length(comdata$Miles)
length(comdata$Miles.EV)
ind <- which(comdata$G1n12!="at polls")
ind <- which(comdata$G1n12!="at polls" & comdata$G1n12!="mail" & comdata$G1n12!="missing")
plot(comdata$Miles.EV[ind],m1$fitted,col="red",type="l")
summary(m1)
summary(m1)
testm <- glm(polls_gen~Miles.PL,data=subset(comdata,G1n12!="no vote" & G1n12!="mail"& G1n12!="missing"),family=binomial)
summary(testm)
testind<-which(G1n12!="no vote" & comdata$G1n12!="mail" & comdata$G1n12!="missing")
testind<-which(comdata$G1n12!="no vote" & comdata$G1n12!="mail" & comdata$G1n12!="missing")
length(testind)
plot(comdata$Miles.PL[ind],testm$fitted,col="red",type="l")
length(testm$fitted)
plot(comdata$Miles.PL[testind],testm$fitted,col="red",type="l")
?predict.glm
summary(m1)
summary(m2)
summary(m3)
?merge
summary(m2)
m2.gam<-gam(polls_gen~s(Miles.PL),data=subset(comdata,G1n12!="early" & G1n12!="mail" & G1n12!="missing"),family=binomial)
library(gam)
m2.gam<-gam(polls_gen~s(Miles.PL),data=subset(comdata,G1n12!="early" & G1n12!="mail" & G1n12!="missing"),family=binomial)
plot(m2.gam)
summary(m2.gam)
View(comdata)
install.packages("car")
library(car)
plot(comdata$Miles.PL,polls.gen)
plot(comdata$Miles.PL,comdata$polls.gen)
plot(comdata$Miles.PL,comdata$polls_gen)
m1.gam<-gam(early_gen~s(Miles.EV),data=subset(comdata,G1n12!="at polls" & G1n12!="mail" & G1n12!="missing"),family=binomial)
plot(m1.gam)
summary(m1)
m3.gam<-gam(early_gen~Miles.PL+s(Dif.PL.EV),data=subset(comdata,G1n12!="no vote" & G1n12!="mail" & G1n12!="missing"),family=binomial)
plot(m3.gam)
summary(m3.gam)
m3.gam<-gam(early_gen~s(Miles.PL)+Dif.PL.EV,data=subset(comdata,G1n12!="no vote" & G1n12!="mail" & G1n12!="missing"),family=binomial)
plot(m3.gam)
summary(m2)
plot(m2.gam)
View(comdata)
load("C:/Users/Mark/Dropbox/Research/GoF Test/June18-UpdateMay20.RData")
liResults
ks.test
install.packages(“devtools”)
install.packages("devtools”)
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(changepoint)
library(changepoints)
library(cpm)
install.packages("changepoint")
library(changepoint)
?changepoint
changepoint::news
cpt.mean
methods(cpt.mean)
method(cpt.mean)
?system.time
?%.%
?%in%
?with
?assign
load("C:/Users/Mark/AppData/Local/Temp/KFM2.RData")
KFM2
library(reshape)
install.packages("reshape")
data(smiths)
data(smith)
library(reshape)
data(smiths)
smiths
melt(smiths)
melt(smiths,id=c("subject","time"))
?melt
melt(smiths,id=1:2
)
trial <- data.frame(id = factor(1:4), A1 = c(1, 2, 1, 2), A2 = c(2,                                                              + 1, 2, 1), B1 = c(3, 3, 3, 3))
trial
trialm <- melt(trial)
trialm
install.packages("knitr")
library(knitr)
install.packages("ggplot2")
install.packages("devtools")
library(devtools)
find_rtools()
library(devtools)
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
shinyapps::setAccountInfo(name='morndorff', token='0860123ED911EEDB90A75E15EC11D097', secret='f+Gif2ZTLvggluo07bL1h1AlH4IRM0MPEOaEbVLs')
---
shinyapps::setAccountInfo(name='morndorff', token='AC11973554AEB14CB87E645947F3E646', secret='U7aGDs/D/r2VccZjZX90qPDpCEVJjCwivDmVrSJk')
deployApp()
library(shiny)
?renderPlot
library(devtools)
install.packages("shiny")
library(shiny)
library(knitr)
install.packages("animation")
library(animation)
?animation
`Data630` <- read.csv("C:/Users/Mark/Dropbox/Shared with Mark/Organizer Research Data/6-30-14 Data File.csv")
Data630 <- Data630[-1, ]
rm(list=ls())
data(diamonds)
library(ggplot2)
data(diamonds)
head(diamonds)
dsmall <- diamonds[sample(nrow(diamonds), 100), ]
qplot(carat, price, data=diamonds)
qplot(log(carat), price, data=diamonds)
qplot(carat, log(price), data=diamonds)
qplot(log(carat), log(price), data=diamonds)
qplot(carat, x*y*z, data=diamonds)
qplot(carat, price, data = dsmall, colour = color)
qplot(carat, price, data = dsmall, shape = cut)
qplot(carat, price, data = diamonds, alpha = I(1/10))
qplot(carat, price, data = diamonds, alpha = I(1/100))
qplot(carat, price, data = diamonds, alpha = I(1/200))
qplot(carat, price, data=diamonds, geom=smoothing)
qplot(carat, price, data=diamonds, geom="smooth")
qplot(carat, data=diamond)
qplot(carat, data=diamonds)
qplot(carat, data=diamonds, geom="polygon")
qplot(carat, data=diamonds, geom="freqpoly")
qplot(carat, data=diamonds, geom="density")
qplot(carat, price, data=diamonds, geom=c("point","smooth"))
qplot(carat, price, data=diamonds, geom=c("point","smooth"), span=.2)
qplot(carat, price, data=diamonds, geom=c("point","smooth"), span=1)
qplot(carat, price, data=diamonds, geom=c("point","smooth"), method="loess", span=.2)
rm(list=ls())
setwd("C:/Users/Mark/Dropbox/Research/GoF Test")
source("functions.R")
set.seed(5)
x <- rnorm(100)
myts.par(x, qt, 3)
source("functions.R")
source("functions.R")
myts.par(x, qt, 3, do.plot=TRUE)
qt(.8,3)
qt(.9,3)
qt(1.2,3)
source("functions.R")
myts.par(x, qt, 3, do.plot=TRUE)
ks.test
source("functions_string.R")
y <- qnorm()
y <- qnorm
y1 <- dist.conv(y,"r")
y1 <- dist.conv("qnorm","r")
y1
is.identical(y,rnorm)
identical(y,rnorm)
identical(y1,rnorm)
identical(y1,qnorm)
identical(y1,pnorm)
as.character(qnorm)
name(qnorm)
str(qnorm)
package <- as.character(substitute(qnorm))
package
source("functions_string.R")
source("functions_string.R")
y
dist.conv(qnorm,"r")
source("functions_string.R")
dist.conv(qnorm,"r")
a <-dist.conv(qnorm,"r")
a(10)
a
rnorm
qnorm
pnorm
a
a <- "qnorm"
dist <- strsplit(a, "r")[[1]][2]
dist
funname <- as.character(substitute(a))
funname
a
a <- qnorm
funname <- as.character(substitute(a))
funname
source("functions_string.R")
dist.conv("qnorm","r")
a <- dist.conv("qnorm","r")
str(a)
a(10)
a <- dist.conv(qnorm,"r")
a
source("functions_string.R")
a <- dist.conv(qnorm,"r")
a(10)
a <- dist.conv(qnorm,"p")
pnorm(10)
pnorm(2)
a <- dist.conv("qnorm","p")
a(2)
a <- dist.conv("qnorm","r")
a(10)
?vector
a <- vector(length=num.perm)
a <- vector(length=5)
a
a <- vector(length=5, mode="numeric")
a
source("functions.R")
x
myts(x,qnorm)
myts(x,qnorm,0,2)
new.perm.test(x,qnorm,0,2
)
new.perm.test(x,qnorm,0,2, f=myts)
dist.conv(qnorm,"r")
a <- dist.conv(qnorm,"r")
a(10)
hist(a(100))
new.perm.test(x,y=qnorm,0,2, f=myts)
new.perm.test(x,"qnorm",0,2, f=myts)
x
source("functions.R")
new.perm.test(x,qnorm,0,2, f=myts)
new.perm.test(x,qnorm,f=myts)
source("functions.R")
new.perm.test(x,qnorm,f=myts)
is.function(qnorm)
ry <- dist.conv(funname=qnorm,type="r")
ry
ry(10)
is.character(qnorm)
source("functions.R")
new.perm.test(x,qnorm,f=myts)
y <- qnorm
dist.conv(y,type="r")
?environment
environment()
?get
get(y, pos=-1)
get(y, pos=-1,mod="function")
get("y", pos=-1,mod="function")
get("y",mod="function")
source("functions.R")
new.perm.test(x,qnorm,f=myts)
new.perm.test(x,"qnorm",f=myts)
y
dist.conv(y,type="r")
str(y)
substitute(y)
?substittue
?str
summary(y)
args(y_
args(y)
?quote
?deparse
get(y)
y
get("qnorm")
source("functions.R")
new.perm.test(x,"qnorm",f=myts)
"qnorm"
y
"y"
new.perm.test(x,"qnorm",f=myts)
source("functions.R")
new.perm.test(x,"qnorm",f=myts)
x
source("functions.R")
new.perm.test(x,"qnorm",f=myts)
y <- "qnorm"
dist.conv(y,type="r")
a < -dist.conv(y,type="r")
a <- dist.conv(y,type="r")
a(1)
?get
y <- qnorm
a <- dist.conv(y,type="r")
source("functions.R")
source("functions.R")
dist.conv(y,type="r")
dist.conv(qnorm,type="r")
source("functions.R")
dist.conv(qnorm,type="r")
source("functions.R")
dist.conv(qnorm,type="r")
source("functions.R")
dist.conv(qnorm,type="r")
environment(dist.conv)
source("functions.R")
new.perm.test(x,"qnorm",f=myts)
new.perm.test(x,qnorm,f=myts)
source("functions.R")
new.perm.test(x,qnorm,f=myts)
new.perm.test(x,"qnorm",f=myts)
A
a
attributes(a)
formals(a)
body(a)
environment(a)
y <- "qnorm"
y
as.character(y)
paste(y)
y <- qnorm
paste(y)
dist.conv(y,type="r")
dist.conv(qnorm,type="r")
source("functions.R")
dist.conv(qnorm,type="r")
source("functions.R")
dist.conv(qnorm,type="r")
dist.conv(y,type="r")
y <- "qnorm"
dist.conv(y,type="r")
new.perm.test(x,"qnorm",f=myts)
source("functions.R")
new.perm.test(x,"qnorm",f=myts)
new.perm.test(x,"qnorm",0,1,f=myts)
x
x <- rnorm(100)
new.perm.test(x,"qnorm",0,1,f=myts)
new.perm.test(x,"qnorm",0,2,f=myts)
new.perm.test(x,"qnorm",0,6,f=myts)
new.perm.test(x,"qt",0,6,f=myts.par)
new.perm.test(x,"qt",6,f=myts.par)
new.perm.test(x,"qt",df=6,f=myts.par)
new.perm.test(x,"qnorm",f=myts.par)
x <- rnorm(100,0,28)
new.perm.test(x,"qnorm",f=myts.par)
new.perm.test(x,"qt",6,f=myts.par)
new.perm.test(x,y="qt",6,f=myts.par)
source"functions.R")
source("functions.R")
new.perm.test(x,"qt",6,f=myts.par)
new.perm.test(x,y="qt",6,f=myts.par)
source("functions.R")
new.perm.test(x,y="qt",6,f=myts.par)
source("functions.R")
new.perm.test(x,y="qt",6,f=myts.par)
source("functions.R")
new.perm.test(x,y="qt",6,f=myts.par)
new.perm.test(x,qnorm,f=myts.par)
new.perm.test(x,qnorm,f=myts.par)
new.perm.test(x,"qnorm",f=myts.par)
x <- rnorm(100)
new.perm.test(x,"qnorm",f=myts.par)
new.perm.test(x,"qnorm",f=myts.par)
x <- rnorm(100)
new.perm.test(x,"qnorm",f=myts.par)
new.perm.test(x,"qnorm",0,2,,f=myts.par)
new.perm.test(x,"qnorm",0,2,f=myts.par)
new.perm.test(x,"qnorm",0,1.2,f=myts.par)
new.perm.test(x,"qnorm",0,1.2,f=ks.res)
new.perm.test(x,"qnorm",0,1.2,f=ks.res.simp)
?ks.res
ks.res
ks.res(x,qnorm)
?ks.test
ks.test(x,qnorm)
ks.test(x,pnorm)
